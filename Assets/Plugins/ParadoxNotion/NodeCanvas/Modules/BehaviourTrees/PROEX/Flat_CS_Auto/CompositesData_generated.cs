// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.BT.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ParallelData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ParallelData GetRootAsParallelData(ByteBuffer _bb) { return GetRootAsParallelData(_bb, new ParallelData()); }
  public static ParallelData GetRootAsParallelData(ByteBuffer _bb, ParallelData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParallelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool FinishedConnections(int j) { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int FinishedConnectionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetFinishedConnectionsBytes() { return __p.__vector_as_span<bool>(4, 1); }
#else
  public ArraySegment<byte>? GetFinishedConnectionsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public bool[] GetFinishedConnectionsArray() { return __p.__vector_as_array<bool>(4); }
  public int FinishedConnectionsCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.ParallelData> CreateParallelData(FlatBufferBuilder builder,
      VectorOffset finished_connectionsOffset = default(VectorOffset),
      int finished_connections_count = 0) {
    builder.StartTable(2);
    ParallelData.AddFinishedConnectionsCount(builder, finished_connections_count);
    ParallelData.AddFinishedConnections(builder, finished_connectionsOffset);
    return ParallelData.EndParallelData(builder);
  }

  public static void StartParallelData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFinishedConnections(FlatBufferBuilder builder, VectorOffset finishedConnectionsOffset) { builder.AddOffset(0, finishedConnectionsOffset.Value, 0); }
  public static VectorOffset CreateFinishedConnectionsVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFinishedConnectionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddFinishedConnectionsCount(FlatBufferBuilder builder, int finishedConnectionsCount) { builder.AddInt(1, finishedConnectionsCount, 0); }
  public static Offset<PRO.BT.Flat.ParallelData> EndParallelData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.ParallelData>(o);
  }
}


static public class ParallelDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*FinishedConnections*/, 1 /*bool*/, false)
      && verifier.VerifyField(tablePos, 6 /*FinishedConnectionsCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SelectorData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SelectorData GetRootAsSelectorData(ByteBuffer _bb) { return GetRootAsSelectorData(_bb, new SelectorData()); }
  public static SelectorData GetRootAsSelectorData(ByteBuffer _bb, SelectorData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectorData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LastRunningNodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.SelectorData> CreateSelectorData(FlatBufferBuilder builder,
      int last_running_node_index = 0) {
    builder.StartTable(1);
    SelectorData.AddLastRunningNodeIndex(builder, last_running_node_index);
    return SelectorData.EndSelectorData(builder);
  }

  public static void StartSelectorData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastRunningNodeIndex(FlatBufferBuilder builder, int lastRunningNodeIndex) { builder.AddInt(0, lastRunningNodeIndex, 0); }
  public static Offset<PRO.BT.Flat.SelectorData> EndSelectorData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.SelectorData>(o);
  }
}


static public class SelectorDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LastRunningNodeIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SequencerData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SequencerData GetRootAsSequencerData(ByteBuffer _bb) { return GetRootAsSequencerData(_bb, new SequencerData()); }
  public static SequencerData GetRootAsSequencerData(ByteBuffer _bb, SequencerData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SequencerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LastRunningNodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.SequencerData> CreateSequencerData(FlatBufferBuilder builder,
      int last_running_node_index = 0) {
    builder.StartTable(1);
    SequencerData.AddLastRunningNodeIndex(builder, last_running_node_index);
    return SequencerData.EndSequencerData(builder);
  }

  public static void StartSequencerData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastRunningNodeIndex(FlatBufferBuilder builder, int lastRunningNodeIndex) { builder.AddInt(0, lastRunningNodeIndex, 0); }
  public static Offset<PRO.BT.Flat.SequencerData> EndSequencerData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.SequencerData>(o);
  }
}


static public class SequencerDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LastRunningNodeIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
