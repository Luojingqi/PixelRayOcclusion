// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.BT.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ParallelData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ParallelData GetRootAsParallelData(ByteBuffer _bb) { return GetRootAsParallelData(_bb, new ParallelData()); }
  public static ParallelData GetRootAsParallelData(ByteBuffer _bb, ParallelData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ParallelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool FinishedConnections(int j) { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int FinishedConnectionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetFinishedConnectionsBytes() { return __p.__vector_as_span<bool>(4, 1); }
#else
  public ArraySegment<byte>? GetFinishedConnectionsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public bool[] GetFinishedConnectionsArray() { return __p.__vector_as_array<bool>(4); }
  public int FinishedConnectionsCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.ParallelData> CreateParallelData(FlatBufferBuilder builder,
      VectorOffset finished_connectionsOffset = default(VectorOffset),
      int finished_connections_count = 0) {
    builder.StartTable(2);
    ParallelData.AddFinishedConnectionsCount(builder, finished_connections_count);
    ParallelData.AddFinishedConnections(builder, finished_connectionsOffset);
    return ParallelData.EndParallelData(builder);
  }

  public static void StartParallelData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFinishedConnections(FlatBufferBuilder builder, VectorOffset finishedConnectionsOffset) { builder.AddOffset(0, finishedConnectionsOffset.Value, 0); }
  public static VectorOffset CreateFinishedConnectionsVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedConnectionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFinishedConnectionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddFinishedConnectionsCount(FlatBufferBuilder builder, int finishedConnectionsCount) { builder.AddInt(1, finishedConnectionsCount, 0); }
  public static Offset<PRO.BT.Flat.ParallelData> EndParallelData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.ParallelData>(o);
  }
}


static public class ParallelDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*FinishedConnections*/, 1 /*bool*/, false)
      && verifier.VerifyField(tablePos, 6 /*FinishedConnectionsCount*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SelectorData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SelectorData GetRootAsSelectorData(ByteBuffer _bb) { return GetRootAsSelectorData(_bb, new SelectorData()); }
  public static SelectorData GetRootAsSelectorData(ByteBuffer _bb, SelectorData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SelectorData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LastRunningNodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.SelectorData> CreateSelectorData(FlatBufferBuilder builder,
      int last_running_node_index = 0) {
    builder.StartTable(1);
    SelectorData.AddLastRunningNodeIndex(builder, last_running_node_index);
    return SelectorData.EndSelectorData(builder);
  }

  public static void StartSelectorData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastRunningNodeIndex(FlatBufferBuilder builder, int lastRunningNodeIndex) { builder.AddInt(0, lastRunningNodeIndex, 0); }
  public static Offset<PRO.BT.Flat.SelectorData> EndSelectorData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.SelectorData>(o);
  }
}


static public class SelectorDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LastRunningNodeIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SequencerData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SequencerData GetRootAsSequencerData(ByteBuffer _bb) { return GetRootAsSequencerData(_bb, new SequencerData()); }
  public static SequencerData GetRootAsSequencerData(ByteBuffer _bb, SequencerData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SequencerData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LastRunningNodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.BT.Flat.SequencerData> CreateSequencerData(FlatBufferBuilder builder,
      int last_running_node_index = 0) {
    builder.StartTable(1);
    SequencerData.AddLastRunningNodeIndex(builder, last_running_node_index);
    return SequencerData.EndSequencerData(builder);
  }

  public static void StartSequencerData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddLastRunningNodeIndex(FlatBufferBuilder builder, int lastRunningNodeIndex) { builder.AddInt(0, lastRunningNodeIndex, 0); }
  public static Offset<PRO.BT.Flat.SequencerData> EndSequencerData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.SequencerData>(o);
  }
}


static public class SequencerDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*LastRunningNodeIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct TimeoutData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TimeoutData GetRootAsTimeoutData(ByteBuffer _bb) { return GetRootAsTimeoutData(_bb, new TimeoutData()); }
  public static TimeoutData GetRootAsTimeoutData(ByteBuffer _bb, TimeoutData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeoutData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float TimeOut { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<PRO.BT.Flat.TimeoutData> CreateTimeoutData(FlatBufferBuilder builder,
      float time_out = 0.0f) {
    builder.StartTable(1);
    TimeoutData.AddTimeOut(builder, time_out);
    return TimeoutData.EndTimeoutData(builder);
  }

  public static void StartTimeoutData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddTimeOut(FlatBufferBuilder builder, float timeOut) { builder.AddFloat(0, timeOut, 0.0f); }
  public static Offset<PRO.BT.Flat.TimeoutData> EndTimeoutData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.TimeoutData>(o);
  }
}


static public class TimeoutDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TimeOut*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct BTNodeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BTNodeData GetRootAsBTNodeData(ByteBuffer _bb) { return GetRootAsBTNodeData(_bb, new BTNodeData()); }
  public static BTNodeData GetRootAsBTNodeData(ByteBuffer _bb, BTNodeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BTNodeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Status { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public float TimeStarted { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public byte Extend(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ExtendLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtendBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetExtendBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetExtendArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<PRO.BT.Flat.BTNodeData> CreateBTNodeData(FlatBufferBuilder builder,
      byte status = 0,
      float time_started = 0.0f,
      VectorOffset extendOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BTNodeData.AddExtend(builder, extendOffset);
    BTNodeData.AddTimeStarted(builder, time_started);
    BTNodeData.AddStatus(builder, status);
    return BTNodeData.EndBTNodeData(builder);
  }

  public static void StartBTNodeData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStatus(FlatBufferBuilder builder, byte status) { builder.AddByte(0, status, 0); }
  public static void AddTimeStarted(FlatBufferBuilder builder, float timeStarted) { builder.AddFloat(1, timeStarted, 0.0f); }
  public static void AddExtend(FlatBufferBuilder builder, VectorOffset extendOffset) { builder.AddOffset(2, extendOffset.Value, 0); }
  public static VectorOffset CreateExtendVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtendVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.BT.Flat.BTNodeData> EndBTNodeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.BTNodeData>(o);
  }
}


static public class BTNodeDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Status*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*TimeStarted*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Extend*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct BehaviourTreeData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BehaviourTreeData GetRootAsBehaviourTreeData(ByteBuffer _bb) { return GetRootAsBehaviourTreeData(_bb, new BehaviourTreeData()); }
  public static BehaviourTreeData GetRootAsBehaviourTreeData(ByteBuffer _bb, BehaviourTreeData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BehaviourTreeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float DeltaTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ElapsedTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public byte RootStatus { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public float IntervalCounter { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public PRO.BT.Flat.BTNodeData? AllNode(int j) { int o = __p.__offset(12); return o != 0 ? (PRO.BT.Flat.BTNodeData?)(new PRO.BT.Flat.BTNodeData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AllNodeLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.BT.Flat.BehaviourTreeData> CreateBehaviourTreeData(FlatBufferBuilder builder,
      float delta_time = 0.0f,
      float elapsed_time = 0.0f,
      byte root_status = 0,
      float interval_counter = 0.0f,
      VectorOffset all_nodeOffset = default(VectorOffset)) {
    builder.StartTable(5);
    BehaviourTreeData.AddAllNode(builder, all_nodeOffset);
    BehaviourTreeData.AddIntervalCounter(builder, interval_counter);
    BehaviourTreeData.AddElapsedTime(builder, elapsed_time);
    BehaviourTreeData.AddDeltaTime(builder, delta_time);
    BehaviourTreeData.AddRootStatus(builder, root_status);
    return BehaviourTreeData.EndBehaviourTreeData(builder);
  }

  public static void StartBehaviourTreeData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddDeltaTime(FlatBufferBuilder builder, float deltaTime) { builder.AddFloat(0, deltaTime, 0.0f); }
  public static void AddElapsedTime(FlatBufferBuilder builder, float elapsedTime) { builder.AddFloat(1, elapsedTime, 0.0f); }
  public static void AddRootStatus(FlatBufferBuilder builder, byte rootStatus) { builder.AddByte(2, rootStatus, 0); }
  public static void AddIntervalCounter(FlatBufferBuilder builder, float intervalCounter) { builder.AddFloat(3, intervalCounter, 0.0f); }
  public static void AddAllNode(FlatBufferBuilder builder, VectorOffset allNodeOffset) { builder.AddOffset(4, allNodeOffset.Value, 0); }
  public static VectorOffset CreateAllNodeVector(FlatBufferBuilder builder, Offset<PRO.BT.Flat.BTNodeData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAllNodeVectorBlock(FlatBufferBuilder builder, Offset<PRO.BT.Flat.BTNodeData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllNodeVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.BT.Flat.BTNodeData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAllNodeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.BT.Flat.BTNodeData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAllNodeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.BT.Flat.BehaviourTreeData> EndBehaviourTreeData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.BehaviourTreeData>(o);
  }
}


static public class BehaviourTreeDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*DeltaTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ElapsedTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*RootStatus*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*IntervalCounter*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfTables(tablePos, 12 /*AllNode*/, PRO.BT.Flat.BTNodeDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
