// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.BT.Flat.Base
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct ActionTaskData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActionTaskData GetRootAsActionTaskData(ByteBuffer _bb) { return GetRootAsActionTaskData(_bb, new ActionTaskData()); }
  public static ActionTaskData GetRootAsActionTaskData(ByteBuffer _bb, ActionTaskData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActionTaskData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Status { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public float TimeStarted { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Latch { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public byte Extend(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ExtendLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtendBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExtendBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExtendArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<PRO.BT.Flat.Base.ActionTaskData> CreateActionTaskData(FlatBufferBuilder builder,
      byte status = 0,
      float time_started = 0.0f,
      bool latch = false,
      VectorOffset extendOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ActionTaskData.AddExtend(builder, extendOffset);
    ActionTaskData.AddTimeStarted(builder, time_started);
    ActionTaskData.AddLatch(builder, latch);
    ActionTaskData.AddStatus(builder, status);
    return ActionTaskData.EndActionTaskData(builder);
  }

  public static void StartActionTaskData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddStatus(FlatBufferBuilder builder, byte status) { builder.AddByte(0, status, 0); }
  public static void AddTimeStarted(FlatBufferBuilder builder, float timeStarted) { builder.AddFloat(1, timeStarted, 0.0f); }
  public static void AddLatch(FlatBufferBuilder builder, bool latch) { builder.AddBool(2, latch, false); }
  public static void AddExtend(FlatBufferBuilder builder, VectorOffset extendOffset) { builder.AddOffset(3, extendOffset.Value, 0); }
  public static VectorOffset CreateExtendVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtendVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.BT.Flat.Base.ActionTaskData> EndActionTaskData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.Base.ActionTaskData>(o);
  }
}


static public class ActionTaskDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Status*/, 1 /*byte*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*TimeStarted*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Latch*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Extend*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct ActionTaskListData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ActionTaskListData GetRootAsActionTaskListData(ByteBuffer _bb) { return GetRootAsActionTaskListData(_bb, new ActionTaskListData()); }
  public static ActionTaskListData GetRootAsActionTaskListData(ByteBuffer _bb, ActionTaskListData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ActionTaskListData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CurrentActionIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool FinishedIndeces(int j) { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int FinishedIndecesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<bool> GetFinishedIndecesBytes() { return __p.__vector_as_span<bool>(6, 1); }
#else
  public ArraySegment<byte>? GetFinishedIndecesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public bool[] GetFinishedIndecesArray() { return __p.__vector_as_array<bool>(6); }
  public PRO.BT.Flat.Base.ActionTaskData? Actions(int j) { int o = __p.__offset(8); return o != 0 ? (PRO.BT.Flat.Base.ActionTaskData?)(new PRO.BT.Flat.Base.ActionTaskData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ActionsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.BT.Flat.Base.ActionTaskListData> CreateActionTaskListData(FlatBufferBuilder builder,
      int current_action_index = 0,
      VectorOffset finished_indecesOffset = default(VectorOffset),
      VectorOffset actionsOffset = default(VectorOffset)) {
    builder.StartTable(3);
    ActionTaskListData.AddActions(builder, actionsOffset);
    ActionTaskListData.AddFinishedIndeces(builder, finished_indecesOffset);
    ActionTaskListData.AddCurrentActionIndex(builder, current_action_index);
    return ActionTaskListData.EndActionTaskListData(builder);
  }

  public static void StartActionTaskListData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCurrentActionIndex(FlatBufferBuilder builder, int currentActionIndex) { builder.AddInt(0, currentActionIndex, 0); }
  public static void AddFinishedIndeces(FlatBufferBuilder builder, VectorOffset finishedIndecesOffset) { builder.AddOffset(1, finishedIndecesOffset.Value, 0); }
  public static VectorOffset CreateFinishedIndecesVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFinishedIndecesVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedIndecesVectorBlock(FlatBufferBuilder builder, ArraySegment<bool> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFinishedIndecesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<bool>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFinishedIndecesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddActions(FlatBufferBuilder builder, VectorOffset actionsOffset) { builder.AddOffset(2, actionsOffset.Value, 0); }
  public static VectorOffset CreateActionsVector(FlatBufferBuilder builder, Offset<PRO.BT.Flat.Base.ActionTaskData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, Offset<PRO.BT.Flat.Base.ActionTaskData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.BT.Flat.Base.ActionTaskData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateActionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.BT.Flat.Base.ActionTaskData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartActionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.BT.Flat.Base.ActionTaskListData> EndActionTaskListData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.Base.ActionTaskListData>(o);
  }
}


static public class ActionTaskListDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*CurrentActionIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*FinishedIndeces*/, 1 /*bool*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 8 /*Actions*/, PRO.BT.Flat.Base.ActionTaskDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct ConditionTaskData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConditionTaskData GetRootAsConditionTaskData(ByteBuffer _bb) { return GetRootAsConditionTaskData(_bb, new ConditionTaskData()); }
  public static ConditionTaskData GetRootAsConditionTaskData(ByteBuffer _bb, ConditionTaskData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionTaskData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int YieldReturn { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Yields { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsRuntimeEnabled { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public byte Extend(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ExtendLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtendBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetExtendBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetExtendArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<PRO.BT.Flat.Base.ConditionTaskData> CreateConditionTaskData(FlatBufferBuilder builder,
      int yield_return = 0,
      int yields = 0,
      bool is_runtime_enabled = false,
      VectorOffset extendOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ConditionTaskData.AddExtend(builder, extendOffset);
    ConditionTaskData.AddYields(builder, yields);
    ConditionTaskData.AddYieldReturn(builder, yield_return);
    ConditionTaskData.AddIsRuntimeEnabled(builder, is_runtime_enabled);
    return ConditionTaskData.EndConditionTaskData(builder);
  }

  public static void StartConditionTaskData(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddYieldReturn(FlatBufferBuilder builder, int yieldReturn) { builder.AddInt(0, yieldReturn, 0); }
  public static void AddYields(FlatBufferBuilder builder, int yields) { builder.AddInt(1, yields, 0); }
  public static void AddIsRuntimeEnabled(FlatBufferBuilder builder, bool isRuntimeEnabled) { builder.AddBool(2, isRuntimeEnabled, false); }
  public static void AddExtend(FlatBufferBuilder builder, VectorOffset extendOffset) { builder.AddOffset(3, extendOffset.Value, 0); }
  public static VectorOffset CreateExtendVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtendVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.BT.Flat.Base.ConditionTaskData> EndConditionTaskData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.Base.ConditionTaskData>(o);
  }
}


static public class ConditionTaskDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*YieldReturn*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Yields*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*IsRuntimeEnabled*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Extend*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct ConditionTaskListData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static ConditionTaskListData GetRootAsConditionTaskListData(ByteBuffer _bb) { return GetRootAsConditionTaskListData(_bb, new ConditionTaskListData()); }
  public static ConditionTaskListData GetRootAsConditionTaskListData(ByteBuffer _bb, ConditionTaskListData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConditionTaskListData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.BT.Flat.Base.ConditionTaskData? Conditions(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.BT.Flat.Base.ConditionTaskData?)(new PRO.BT.Flat.Base.ConditionTaskData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ConditionsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.BT.Flat.Base.ConditionTaskListData> CreateConditionTaskListData(FlatBufferBuilder builder,
      VectorOffset conditionsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ConditionTaskListData.AddConditions(builder, conditionsOffset);
    return ConditionTaskListData.EndConditionTaskListData(builder);
  }

  public static void StartConditionTaskListData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddConditions(FlatBufferBuilder builder, VectorOffset conditionsOffset) { builder.AddOffset(0, conditionsOffset.Value, 0); }
  public static VectorOffset CreateConditionsVector(FlatBufferBuilder builder, Offset<PRO.BT.Flat.Base.ConditionTaskData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, Offset<PRO.BT.Flat.Base.ConditionTaskData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.BT.Flat.Base.ConditionTaskData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateConditionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.BT.Flat.Base.ConditionTaskData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartConditionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.BT.Flat.Base.ConditionTaskListData> EndConditionTaskListData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.Base.ConditionTaskListData>(o);
  }
}


static public class ConditionTaskListDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Conditions*/, PRO.BT.Flat.Base.ConditionTaskDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
