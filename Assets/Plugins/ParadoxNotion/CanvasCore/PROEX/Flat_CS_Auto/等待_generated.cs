// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.BT.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct WaitData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static WaitData GetRootAsWaitData(ByteBuffer _bb) { return GetRootAsWaitData(_bb, new WaitData()); }
  public static WaitData GetRootAsWaitData(ByteBuffer _bb, WaitData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WaitData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Value0 { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Value1 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<PRO.BT.Flat.WaitData> CreateWaitData(FlatBufferBuilder builder,
      float value0 = 0.0f,
      float value1 = 0.0f) {
    builder.StartTable(2);
    WaitData.AddValue1(builder, value1);
    WaitData.AddValue0(builder, value0);
    return WaitData.EndWaitData(builder);
  }

  public static void StartWaitData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValue0(FlatBufferBuilder builder, float value0) { builder.AddFloat(0, value0, 0.0f); }
  public static void AddValue1(FlatBufferBuilder builder, float value1) { builder.AddFloat(1, value1, 0.0f); }
  public static Offset<PRO.BT.Flat.WaitData> EndWaitData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.WaitData>(o);
  }
}


static public class WaitDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value0*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*Value1*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
