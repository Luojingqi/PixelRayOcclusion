// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Vector2 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<PRO.Flat.Vector2> CreateVector2(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<PRO.Flat.Vector2>(builder.Offset);
  }
}

public struct Vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<PRO.Flat.Vector3> CreateVector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<PRO.Flat.Vector3>(builder.Offset);
  }
}

public struct Vector2Int : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector2Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }

  public static Offset<PRO.Flat.Vector2Int> CreateVector2Int(FlatBufferBuilder builder, int X, int Y) {
    builder.Prep(4, 8);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<PRO.Flat.Vector2Int>(builder.Offset);
  }
}

public struct Vector3Int : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector3Int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int X { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Y { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Z { get { return __p.bb.GetInt(__p.bb_pos + 8); } }

  public static Offset<PRO.Flat.Vector3Int> CreateVector3Int(FlatBufferBuilder builder, int X, int Y, int Z) {
    builder.Prep(4, 12);
    builder.PutInt(Z);
    builder.PutInt(Y);
    builder.PutInt(X);
    return new Offset<PRO.Flat.Vector3Int>(builder.Offset);
  }
}

public struct Quaternion : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Quaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<PRO.Flat.Quaternion> CreateQuaternion(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<PRO.Flat.Quaternion>(builder.Offset);
  }
}

public struct Vector2Byte : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vector2Byte __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte X { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte Y { get { return __p.bb.Get(__p.bb_pos + 1); } }

  public static Offset<PRO.Flat.Vector2Byte> CreateVector2Byte(FlatBufferBuilder builder, byte X, byte Y) {
    builder.Prep(1, 2);
    builder.PutByte(Y);
    builder.PutByte(X);
    return new Offset<PRO.Flat.Vector2Byte>(builder.Offset);
  }
}

public struct Color32 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Color32 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte R { get { return __p.bb.Get(__p.bb_pos + 0); } }
  public byte G { get { return __p.bb.Get(__p.bb_pos + 1); } }
  public byte B { get { return __p.bb.Get(__p.bb_pos + 2); } }
  public byte A { get { return __p.bb.Get(__p.bb_pos + 3); } }

  public static Offset<PRO.Flat.Color32> CreateColor32(FlatBufferBuilder builder, byte R, byte G, byte B, byte A) {
    builder.Prep(1, 4);
    builder.PutByte(A);
    builder.PutByte(B);
    builder.PutByte(G);
    builder.PutByte(R);
    return new Offset<PRO.Flat.Color32>(builder.Offset);
  }
}

public struct Transform : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Transform __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector3 Position { get { return (new PRO.Flat.Vector3()).__assign(__p.bb_pos + 0, __p.bb); } }
  public PRO.Flat.Quaternion Rotation { get { return (new PRO.Flat.Quaternion()).__assign(__p.bb_pos + 12, __p.bb); } }
  public PRO.Flat.Vector3 LocalScale { get { return (new PRO.Flat.Vector3()).__assign(__p.bb_pos + 28, __p.bb); } }

  public static Offset<PRO.Flat.Transform> CreateTransform(FlatBufferBuilder builder, float position_X, float position_Y, float position_Z, float rotation_X, float rotation_Y, float rotation_Z, float rotation_W, float local_scale_X, float local_scale_Y, float local_scale_Z) {
    builder.Prep(4, 40);
    builder.Prep(4, 12);
    builder.PutFloat(local_scale_Z);
    builder.PutFloat(local_scale_Y);
    builder.PutFloat(local_scale_X);
    builder.Prep(4, 16);
    builder.PutFloat(rotation_W);
    builder.PutFloat(rotation_Z);
    builder.PutFloat(rotation_Y);
    builder.PutFloat(rotation_X);
    builder.Prep(4, 12);
    builder.PutFloat(position_Z);
    builder.PutFloat(position_Y);
    builder.PutFloat(position_X);
    return new Offset<PRO.Flat.Transform>(builder.Offset);
  }
}

public struct Rigidbody2D : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Rigidbody2D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector2 Velocity { get { return (new PRO.Flat.Vector2()).__assign(__p.bb_pos + 0, __p.bb); } }
  public float AngularVelocity { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public bool Simulated { get { return 0!=__p.bb.Get(__p.bb_pos + 12); } }

  public static Offset<PRO.Flat.Rigidbody2D> CreateRigidbody2D(FlatBufferBuilder builder, float velocity_X, float velocity_Y, float AngularVelocity, bool Simulated) {
    builder.Prep(4, 16);
    builder.Pad(3);
    builder.PutBool(Simulated);
    builder.PutFloat(AngularVelocity);
    builder.Prep(4, 8);
    builder.PutFloat(velocity_Y);
    builder.PutFloat(velocity_X);
    return new Offset<PRO.Flat.Rigidbody2D>(builder.Offset);
  }
}

public struct RaycastHit2D : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public RaycastHit2D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector2 Centroid { get { return (new PRO.Flat.Vector2()).__assign(__p.bb_pos + 0, __p.bb); } }
  public float Distance { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float Fraction { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }
  public PRO.Flat.Vector2 Normal { get { return (new PRO.Flat.Vector2()).__assign(__p.bb_pos + 16, __p.bb); } }
  public PRO.Flat.Vector2 Point { get { return (new PRO.Flat.Vector2()).__assign(__p.bb_pos + 24, __p.bb); } }

  public static Offset<PRO.Flat.RaycastHit2D> CreateRaycastHit2D(FlatBufferBuilder builder, float centroid_X, float centroid_Y, float Distance, float Fraction, float normal_X, float normal_Y, float point_X, float point_Y) {
    builder.Prep(4, 32);
    builder.Prep(4, 8);
    builder.PutFloat(point_Y);
    builder.PutFloat(point_X);
    builder.Prep(4, 8);
    builder.PutFloat(normal_Y);
    builder.PutFloat(normal_X);
    builder.PutFloat(Fraction);
    builder.PutFloat(Distance);
    builder.Prep(4, 8);
    builder.PutFloat(centroid_Y);
    builder.PutFloat(centroid_X);
    return new Offset<PRO.Flat.RaycastHit2D>(builder.Offset);
  }
}


}
