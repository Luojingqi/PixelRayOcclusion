// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BlockBaseData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BlockBaseData GetRootAsBlockBaseData(ByteBuffer _bb) { return GetRootAsBlockBaseData(_bb, new BlockBaseData()); }
  public static BlockBaseData GetRootAsBlockBaseData(ByteBuffer _bb, BlockBaseData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BlockBaseData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string PixelTypeNameArray(int j) { int o = __p.__offset(4); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PixelTypeNameArrayLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PixelColorNameArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PixelColorNameArrayLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PixelBuildingGuidArray(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PixelBuildingGuidArrayLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.PixelData? BlockPixelArray(int j) { int o = __p.__offset(10); return o != 0 ? (PRO.Flat.PixelData?)(new PRO.Flat.PixelData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BlockPixelArrayLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.Vector2Byte? FluidUpdateHash1(int j) { int o = __p.__offset(12); return o != 0 ? (PRO.Flat.Vector2Byte?)(new PRO.Flat.Vector2Byte()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int FluidUpdateHash1Length { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.Vector2Byte? FluidUpdateHash2(int j) { int o = __p.__offset(14); return o != 0 ? (PRO.Flat.Vector2Byte?)(new PRO.Flat.Vector2Byte()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int FluidUpdateHash2Length { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.Vector2Byte? FluidUpdateHash3(int j) { int o = __p.__offset(16); return o != 0 ? (PRO.Flat.Vector2Byte?)(new PRO.Flat.Vector2Byte()).__assign(__p.__vector(o) + j * 2, __p.bb) : null; }
  public int FluidUpdateHash3Length { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.PixelData? BackgroundPixelArray(int j) { int o = __p.__offset(18); return o != 0 ? (PRO.Flat.PixelData?)(new PRO.Flat.PixelData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BackgroundPixelArrayLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.Flat.BlockBaseData> CreateBlockBaseData(FlatBufferBuilder builder,
      VectorOffset pixel_type_name_arrayOffset = default(VectorOffset),
      VectorOffset pixel_color_name_arrayOffset = default(VectorOffset),
      VectorOffset pixel_building_guid_arrayOffset = default(VectorOffset),
      VectorOffset block_pixel_arrayOffset = default(VectorOffset),
      VectorOffset fluid_update_hash1Offset = default(VectorOffset),
      VectorOffset fluid_update_hash2Offset = default(VectorOffset),
      VectorOffset fluid_update_hash3Offset = default(VectorOffset),
      VectorOffset background_pixel_arrayOffset = default(VectorOffset)) {
    builder.StartTable(8);
    BlockBaseData.AddBackgroundPixelArray(builder, background_pixel_arrayOffset);
    BlockBaseData.AddFluidUpdateHash3(builder, fluid_update_hash3Offset);
    BlockBaseData.AddFluidUpdateHash2(builder, fluid_update_hash2Offset);
    BlockBaseData.AddFluidUpdateHash1(builder, fluid_update_hash1Offset);
    BlockBaseData.AddBlockPixelArray(builder, block_pixel_arrayOffset);
    BlockBaseData.AddPixelBuildingGuidArray(builder, pixel_building_guid_arrayOffset);
    BlockBaseData.AddPixelColorNameArray(builder, pixel_color_name_arrayOffset);
    BlockBaseData.AddPixelTypeNameArray(builder, pixel_type_name_arrayOffset);
    return BlockBaseData.EndBlockBaseData(builder);
  }

  public static void StartBlockBaseData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddPixelTypeNameArray(FlatBufferBuilder builder, VectorOffset pixelTypeNameArrayOffset) { builder.AddOffset(0, pixelTypeNameArrayOffset.Value, 0); }
  public static VectorOffset CreatePixelTypeNameArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPixelTypeNameArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPixelColorNameArray(FlatBufferBuilder builder, VectorOffset pixelColorNameArrayOffset) { builder.AddOffset(1, pixelColorNameArrayOffset.Value, 0); }
  public static VectorOffset CreatePixelColorNameArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPixelColorNameArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPixelBuildingGuidArray(FlatBufferBuilder builder, VectorOffset pixelBuildingGuidArrayOffset) { builder.AddOffset(2, pixelBuildingGuidArrayOffset.Value, 0); }
  public static VectorOffset CreatePixelBuildingGuidArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePixelBuildingGuidArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelBuildingGuidArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelBuildingGuidArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPixelBuildingGuidArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBlockPixelArray(FlatBufferBuilder builder, VectorOffset blockPixelArrayOffset) { builder.AddOffset(3, blockPixelArrayOffset.Value, 0); }
  public static VectorOffset CreateBlockPixelArrayVector(FlatBufferBuilder builder, Offset<PRO.Flat.PixelData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBlockPixelArrayVectorBlock(FlatBufferBuilder builder, Offset<PRO.Flat.PixelData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlockPixelArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.Flat.PixelData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBlockPixelArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.Flat.PixelData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBlockPixelArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFluidUpdateHash1(FlatBufferBuilder builder, VectorOffset fluidUpdateHash1Offset) { builder.AddOffset(4, fluidUpdateHash1Offset.Value, 0); }
  public static void StartFluidUpdateHash1Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 1); }
  public static void AddFluidUpdateHash2(FlatBufferBuilder builder, VectorOffset fluidUpdateHash2Offset) { builder.AddOffset(5, fluidUpdateHash2Offset.Value, 0); }
  public static void StartFluidUpdateHash2Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 1); }
  public static void AddFluidUpdateHash3(FlatBufferBuilder builder, VectorOffset fluidUpdateHash3Offset) { builder.AddOffset(6, fluidUpdateHash3Offset.Value, 0); }
  public static void StartFluidUpdateHash3Vector(FlatBufferBuilder builder, int numElems) { builder.StartVector(2, numElems, 1); }
  public static void AddBackgroundPixelArray(FlatBufferBuilder builder, VectorOffset backgroundPixelArrayOffset) { builder.AddOffset(7, backgroundPixelArrayOffset.Value, 0); }
  public static VectorOffset CreateBackgroundPixelArrayVector(FlatBufferBuilder builder, Offset<PRO.Flat.PixelData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBackgroundPixelArrayVectorBlock(FlatBufferBuilder builder, Offset<PRO.Flat.PixelData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBackgroundPixelArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.Flat.PixelData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBackgroundPixelArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.Flat.PixelData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBackgroundPixelArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.Flat.BlockBaseData> EndBlockBaseData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Flat.BlockBaseData>(o);
  }
}


static public class BlockBaseDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfStrings(tablePos, 4 /*PixelTypeNameArray*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 6 /*PixelColorNameArray*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 8 /*PixelBuildingGuidArray*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*BlockPixelArray*/, PRO.Flat.PixelDataVerify.Verify, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*FluidUpdateHash1*/, 2 /*PRO.Flat.Vector2Byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 14 /*FluidUpdateHash2*/, 2 /*PRO.Flat.Vector2Byte*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*FluidUpdateHash3*/, 2 /*PRO.Flat.Vector2Byte*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*BackgroundPixelArray*/, PRO.Flat.PixelDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct PixelData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PixelData GetRootAsPixelData(ByteBuffer _bb) { return GetRootAsPixelData(_bb, new PixelData()); }
  public static PixelData GetRootAsPixelData(ByteBuffer _bb, PixelData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PixelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TypeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Durability { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AffectsTransparency { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int BuildingList(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int BuildingListLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetBuildingListBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetBuildingListBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetBuildingListArray() { return __p.__vector_as_array<int>(12); }

  public static Offset<PRO.Flat.PixelData> CreatePixelData(FlatBufferBuilder builder,
      int type_index = 0,
      int color_index = 0,
      int durability = 0,
      float affects_transparency = 0.0f,
      VectorOffset building_listOffset = default(VectorOffset)) {
    builder.StartTable(5);
    PixelData.AddBuildingList(builder, building_listOffset);
    PixelData.AddAffectsTransparency(builder, affects_transparency);
    PixelData.AddDurability(builder, durability);
    PixelData.AddColorIndex(builder, color_index);
    PixelData.AddTypeIndex(builder, type_index);
    return PixelData.EndPixelData(builder);
  }

  public static void StartPixelData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTypeIndex(FlatBufferBuilder builder, int typeIndex) { builder.AddInt(0, typeIndex, 0); }
  public static void AddColorIndex(FlatBufferBuilder builder, int colorIndex) { builder.AddInt(1, colorIndex, 0); }
  public static void AddDurability(FlatBufferBuilder builder, int durability) { builder.AddInt(2, durability, 0); }
  public static void AddAffectsTransparency(FlatBufferBuilder builder, float affectsTransparency) { builder.AddFloat(3, affectsTransparency, 0.0f); }
  public static void AddBuildingList(FlatBufferBuilder builder, VectorOffset buildingListOffset) { builder.AddOffset(4, buildingListOffset.Value, 0); }
  public static VectorOffset CreateBuildingListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuildingListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuildingListVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuildingListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuildingListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.Flat.PixelData> EndPixelData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Flat.PixelData>(o);
  }
}


static public class PixelDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TypeIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*ColorIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*Durability*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*AffectsTransparency*/, 4 /*float*/, 4, false)
      && verifier.VerifyVectorOfData(tablePos, 12 /*BuildingList*/, 4 /*int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
