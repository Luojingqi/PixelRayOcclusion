// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Building_PixelData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Building_PixelData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TypeIndex { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int ColorIndex { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public PRO.Flat.Vector2Int Offset { get { return (new PRO.Flat.Vector2Int()).__assign(__p.bb_pos + 8, __p.bb); } }
  public int BlockType { get { return __p.bb.GetInt(__p.bb_pos + 16); } }

  public static Offset<PRO.Flat.Building_PixelData> CreateBuilding_PixelData(FlatBufferBuilder builder, int TypeIndex, int ColorIndex, int offset_X, int offset_Y, int BlockType) {
    builder.Prep(4, 20);
    builder.PutInt(BlockType);
    builder.Prep(4, 8);
    builder.PutInt(offset_Y);
    builder.PutInt(offset_X);
    builder.PutInt(ColorIndex);
    builder.PutInt(TypeIndex);
    return new Offset<PRO.Flat.Building_PixelData>(builder.Offset);
  }
}

public struct BuildingBaseData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static BuildingBaseData GetRootAsBuildingBaseData(ByteBuffer _bb) { return GetRootAsBuildingBaseData(_bb, new BuildingBaseData()); }
  public static BuildingBaseData GetRootAsBuildingBaseData(ByteBuffer _bb, BuildingBaseData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuildingBaseData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TypeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public PRO.Flat.Vector2Int? Global { get { int o = __p.__offset(8); return o != 0 ? (PRO.Flat.Vector2Int?)(new PRO.Flat.Vector2Int()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector2Int? Size { get { int o = __p.__offset(10); return o != 0 ? (PRO.Flat.Vector2Int?)(new PRO.Flat.Vector2Int()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string PixelTypeNameArray(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PixelTypeNameArrayLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string PixelColorNameArray(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int PixelColorNameArrayLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.Flat.Building_PixelData? AllPixel(int j) { int o = __p.__offset(16); return o != 0 ? (PRO.Flat.Building_PixelData?)(new PRO.Flat.Building_PixelData()).__assign(__p.__vector(o) + j * 20, __p.bb) : null; }
  public int AllPixelLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public byte ExtendData(int j) { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ExtendDataLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExtendDataBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetExtendDataBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetExtendDataArray() { return __p.__vector_as_array<byte>(18); }

  public static void StartBuildingBaseData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(0, typeNameOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddGlobal(FlatBufferBuilder builder, Offset<PRO.Flat.Vector2Int> globalOffset) { builder.AddStruct(2, globalOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, Offset<PRO.Flat.Vector2Int> sizeOffset) { builder.AddStruct(3, sizeOffset.Value, 0); }
  public static void AddPixelTypeNameArray(FlatBufferBuilder builder, VectorOffset pixelTypeNameArrayOffset) { builder.AddOffset(4, pixelTypeNameArrayOffset.Value, 0); }
  public static VectorOffset CreatePixelTypeNameArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelTypeNameArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPixelTypeNameArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddPixelColorNameArray(FlatBufferBuilder builder, VectorOffset pixelColorNameArrayOffset) { builder.AddOffset(5, pixelColorNameArrayOffset.Value, 0); }
  public static VectorOffset CreatePixelColorNameArrayVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreatePixelColorNameArrayVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartPixelColorNameArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAllPixel(FlatBufferBuilder builder, VectorOffset allPixelOffset) { builder.AddOffset(6, allPixelOffset.Value, 0); }
  public static void StartAllPixelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(20, numElems, 4); }
  public static void AddExtendData(FlatBufferBuilder builder, VectorOffset extendDataOffset) { builder.AddOffset(7, extendDataOffset.Value, 0); }
  public static VectorOffset CreateExtendDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateExtendDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateExtendDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartExtendDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.Flat.BuildingBaseData> EndBuildingBaseData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Flat.BuildingBaseData>(o);
  }
}


static public class BuildingBaseDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*TypeName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Name*/, false)
      && verifier.VerifyField(tablePos, 8 /*Global*/, 8 /*PRO.Flat.Vector2Int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*Size*/, 8 /*PRO.Flat.Vector2Int*/, 4, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*PixelTypeNameArray*/, false)
      && verifier.VerifyVectorOfStrings(tablePos, 14 /*PixelColorNameArray*/, false)
      && verifier.VerifyVectorOfData(tablePos, 16 /*AllPixel*/, 20 /*PRO.Flat.Building_PixelData*/, false)
      && verifier.VerifyVectorOfData(tablePos, 18 /*ExtendData*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
