// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.SkillEditor.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SliceHashData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SliceHashData GetRootAsSliceHashData(ByteBuffer _bb) { return GetRootAsSliceHashData(_bb, new SliceHashData()); }
  public static SliceHashData GetRootAsSliceHashData(ByteBuffer _bb, SliceHashData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SliceHashData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Track { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TrackIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SliceStartFrame { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.SkillEditor.Flat.SliceHashData> CreateSliceHashData(FlatBufferBuilder builder,
      int track = 0,
      int track_index = 0,
      int slice_start_frame = 0) {
    builder.StartTable(3);
    SliceHashData.AddSliceStartFrame(builder, slice_start_frame);
    SliceHashData.AddTrackIndex(builder, track_index);
    SliceHashData.AddTrack(builder, track);
    return SliceHashData.EndSliceHashData(builder);
  }

  public static void StartSliceHashData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTrack(FlatBufferBuilder builder, int track) { builder.AddInt(0, track, 0); }
  public static void AddTrackIndex(FlatBufferBuilder builder, int trackIndex) { builder.AddInt(1, trackIndex, 0); }
  public static void AddSliceStartFrame(FlatBufferBuilder builder, int sliceStartFrame) { builder.AddInt(2, sliceStartFrame, 0); }
  public static Offset<PRO.SkillEditor.Flat.SliceHashData> EndSliceHashData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.SkillEditor.Flat.SliceHashData>(o);
  }
}


static public class SliceHashDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Track*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TrackIndex*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*SliceStartFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SkillLogicData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillLogicData GetRootAsSkillLogicData(ByteBuffer _bb) { return GetRootAsSkillLogicData(_bb, new SkillLogicData()); }
  public static SkillLogicData GetRootAsSkillLogicData(ByteBuffer _bb, SkillLogicData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillLogicData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeArray() { return __p.__vector_as_array<byte>(4); }
  public byte Data(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<PRO.SkillEditor.Flat.SkillLogicData> CreateSkillLogicData(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SkillLogicData.AddData(builder, dataOffset);
    SkillLogicData.AddType(builder, typeOffset);
    return SkillLogicData.EndSkillLogicData(builder);
  }

  public static void StartSkillLogicData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.SkillEditor.Flat.SkillLogicData> EndSkillLogicData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.SkillEditor.Flat.SkillLogicData>(o);
  }
}


static public class SkillLogicDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Type*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Data*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SkillPlayerDataData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillPlayerDataData GetRootAsSkillPlayerDataData(ByteBuffer _bb) { return GetRootAsSkillPlayerDataData(_bb, new SkillPlayerDataData()); }
  public static SkillPlayerDataData GetRootAsSkillPlayerDataData(ByteBuffer _bb, SkillPlayerDataData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillPlayerDataData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SkillVisualPath { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillVisualPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSkillVisualPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSkillVisualPathArray() { return __p.__vector_as_array<byte>(4); }
  public PRO.SkillEditor.Flat.SkillLogicData? SkillLogicList(int j) { int o = __p.__offset(6); return o != 0 ? (PRO.SkillEditor.Flat.SkillLogicData?)(new PRO.SkillEditor.Flat.SkillLogicData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SkillLogicListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public float Time { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NowFrame { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Scale { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<PRO.SkillEditor.Flat.SkillPlayerDataData> CreateSkillPlayerDataData(FlatBufferBuilder builder,
      StringOffset skill_visual_pathOffset = default(StringOffset),
      VectorOffset skill_logic_listOffset = default(VectorOffset),
      float time = 0.0f,
      int now_frame = 0,
      float scale = 0.0f) {
    builder.StartTable(5);
    SkillPlayerDataData.AddScale(builder, scale);
    SkillPlayerDataData.AddNowFrame(builder, now_frame);
    SkillPlayerDataData.AddTime(builder, time);
    SkillPlayerDataData.AddSkillLogicList(builder, skill_logic_listOffset);
    SkillPlayerDataData.AddSkillVisualPath(builder, skill_visual_pathOffset);
    return SkillPlayerDataData.EndSkillPlayerDataData(builder);
  }

  public static void StartSkillPlayerDataData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddSkillVisualPath(FlatBufferBuilder builder, StringOffset skillVisualPathOffset) { builder.AddOffset(0, skillVisualPathOffset.Value, 0); }
  public static void AddSkillLogicList(FlatBufferBuilder builder, VectorOffset skillLogicListOffset) { builder.AddOffset(1, skillLogicListOffset.Value, 0); }
  public static VectorOffset CreateSkillLogicListVector(FlatBufferBuilder builder, Offset<PRO.SkillEditor.Flat.SkillLogicData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSkillLogicListVectorBlock(FlatBufferBuilder builder, Offset<PRO.SkillEditor.Flat.SkillLogicData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillLogicListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.SkillEditor.Flat.SkillLogicData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateSkillLogicListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.SkillEditor.Flat.SkillLogicData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartSkillLogicListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTime(FlatBufferBuilder builder, float time) { builder.AddFloat(2, time, 0.0f); }
  public static void AddNowFrame(FlatBufferBuilder builder, int nowFrame) { builder.AddInt(3, nowFrame, 0); }
  public static void AddScale(FlatBufferBuilder builder, float scale) { builder.AddFloat(4, scale, 0.0f); }
  public static Offset<PRO.SkillEditor.Flat.SkillPlayerDataData> EndSkillPlayerDataData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.SkillEditor.Flat.SkillPlayerDataData>(o);
  }
}


static public class SkillPlayerDataDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*SkillVisualPath*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*SkillLogicList*/, PRO.SkillEditor.Flat.SkillLogicDataVerify.Verify, false)
      && verifier.VerifyField(tablePos, 8 /*Time*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*NowFrame*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*Scale*/, 4 /*float*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct SkillPlayerAgentData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillPlayerAgentData GetRootAsSkillPlayerAgentData(ByteBuffer _bb) { return GetRootAsSkillPlayerAgentData(_bb, new SkillPlayerAgentData()); }
  public static SkillPlayerAgentData GetRootAsSkillPlayerAgentData(ByteBuffer _bb, SkillPlayerAgentData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillPlayerAgentData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Play { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public PRO.SkillEditor.Flat.SkillPlayerDataData? DataList(int j) { int o = __p.__offset(6); return o != 0 ? (PRO.SkillEditor.Flat.SkillPlayerDataData?)(new PRO.SkillEditor.Flat.SkillPlayerDataData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DataListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.SkillEditor.Flat.SkillPlayerAgentData> CreateSkillPlayerAgentData(FlatBufferBuilder builder,
      bool play = false,
      VectorOffset data_listOffset = default(VectorOffset)) {
    builder.StartTable(2);
    SkillPlayerAgentData.AddDataList(builder, data_listOffset);
    SkillPlayerAgentData.AddPlay(builder, play);
    return SkillPlayerAgentData.EndSkillPlayerAgentData(builder);
  }

  public static void StartSkillPlayerAgentData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddPlay(FlatBufferBuilder builder, bool play) { builder.AddBool(0, play, false); }
  public static void AddDataList(FlatBufferBuilder builder, VectorOffset dataListOffset) { builder.AddOffset(1, dataListOffset.Value, 0); }
  public static VectorOffset CreateDataListVector(FlatBufferBuilder builder, Offset<PRO.SkillEditor.Flat.SkillPlayerDataData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, Offset<PRO.SkillEditor.Flat.SkillPlayerDataData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.SkillEditor.Flat.SkillPlayerDataData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDataListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.SkillEditor.Flat.SkillPlayerDataData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDataListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.SkillEditor.Flat.SkillPlayerAgentData> EndSkillPlayerAgentData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.SkillEditor.Flat.SkillPlayerAgentData>(o);
  }
}


static public class SkillPlayerAgentDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Play*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*DataList*/, PRO.SkillEditor.Flat.SkillPlayerDataDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
