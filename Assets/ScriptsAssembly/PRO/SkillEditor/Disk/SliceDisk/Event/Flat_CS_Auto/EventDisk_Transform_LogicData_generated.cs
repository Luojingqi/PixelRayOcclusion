// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.SkillEditor.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct EventDisk_Transform_LogicData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static EventDisk_Transform_LogicData GetRootAsEventDisk_Transform_LogicData(ByteBuffer _bb) { return GetRootAsEventDisk_Transform_LogicData(_bb, new EventDisk_Transform_LogicData()); }
  public static EventDisk_Transform_LogicData GetRootAsEventDisk_Transform_LogicData(ByteBuffer _bb, EventDisk_Transform_LogicData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventDisk_Transform_LogicData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector3? StartPosition { get { int o = __p.__offset(4); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector3? StartRotation { get { int o = __p.__offset(6); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector3? StartScale { get { int o = __p.__offset(8); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector3? EndPosition { get { int o = __p.__offset(10); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector3? EndRotation { get { int o = __p.__offset(12); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector3? EndScale { get { int o = __p.__offset(14); return o != 0 ? (PRO.Flat.Vector3?)(new PRO.Flat.Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.SkillEditor.Flat.SliceHashData? SliceHash { get { int o = __p.__offset(16); return o != 0 ? (PRO.SkillEditor.Flat.SliceHashData?)(new PRO.SkillEditor.Flat.SliceHashData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartEventDisk_Transform_LogicData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddStartPosition(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> startPositionOffset) { builder.AddStruct(0, startPositionOffset.Value, 0); }
  public static void AddStartRotation(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> startRotationOffset) { builder.AddStruct(1, startRotationOffset.Value, 0); }
  public static void AddStartScale(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> startScaleOffset) { builder.AddStruct(2, startScaleOffset.Value, 0); }
  public static void AddEndPosition(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> endPositionOffset) { builder.AddStruct(3, endPositionOffset.Value, 0); }
  public static void AddEndRotation(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> endRotationOffset) { builder.AddStruct(4, endRotationOffset.Value, 0); }
  public static void AddEndScale(FlatBufferBuilder builder, Offset<PRO.Flat.Vector3> endScaleOffset) { builder.AddStruct(5, endScaleOffset.Value, 0); }
  public static void AddSliceHash(FlatBufferBuilder builder, Offset<PRO.SkillEditor.Flat.SliceHashData> sliceHashOffset) { builder.AddOffset(6, sliceHashOffset.Value, 0); }
  public static Offset<PRO.SkillEditor.Flat.EventDisk_Transform_LogicData> EndEventDisk_Transform_LogicData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.SkillEditor.Flat.EventDisk_Transform_LogicData>(o);
  }
}


static public class EventDisk_Transform_LogicDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*StartPosition*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*StartRotation*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*StartScale*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*EndPosition*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*EndRotation*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*EndScale*/, 12 /*PRO.Flat.Vector3*/, 4, false)
      && verifier.VerifyTable(tablePos, 16 /*SliceHash*/, PRO.SkillEditor.Flat.SliceHashDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
