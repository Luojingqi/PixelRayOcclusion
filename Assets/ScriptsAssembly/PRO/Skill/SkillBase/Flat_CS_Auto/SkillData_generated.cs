// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.Skill.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SkillData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SkillData GetRootAsSkillData(ByteBuffer _bb) { return GetRootAsSkillData(_bb, new SkillData()); }
  public static SkillData GetRootAsSkillData(ByteBuffer _bb, SkillData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TypeName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeNameArray() { return __p.__vector_as_array<byte>(4); }
  public string Guid { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGuidBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGuidBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGuidArray() { return __p.__vector_as_array<byte>(6); }
  public byte Datas(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DatasLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDatasBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDatasBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDatasArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<PRO.Skill.Flat.SkillData> CreateSkillData(FlatBufferBuilder builder,
      StringOffset type_nameOffset = default(StringOffset),
      StringOffset guidOffset = default(StringOffset),
      VectorOffset datasOffset = default(VectorOffset)) {
    builder.StartTable(3);
    SkillData.AddDatas(builder, datasOffset);
    SkillData.AddGuid(builder, guidOffset);
    SkillData.AddTypeName(builder, type_nameOffset);
    return SkillData.EndSkillData(builder);
  }

  public static void StartSkillData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTypeName(FlatBufferBuilder builder, StringOffset typeNameOffset) { builder.AddOffset(0, typeNameOffset.Value, 0); }
  public static void AddGuid(FlatBufferBuilder builder, StringOffset guidOffset) { builder.AddOffset(1, guidOffset.Value, 0); }
  public static void AddDatas(FlatBufferBuilder builder, VectorOffset datasOffset) { builder.AddOffset(2, datasOffset.Value, 0); }
  public static VectorOffset CreateDatasVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDatasVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDatasVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.Skill.Flat.SkillData> EndSkillData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Skill.Flat.SkillData>(o);
  }
}


static public class SkillDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*TypeName*/, false)
      && verifier.VerifyString(tablePos, 6 /*Guid*/, false)
      && verifier.VerifyVectorOfData(tablePos, 8 /*Datas*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct RoleSkillData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static RoleSkillData GetRootAsRoleSkillData(ByteBuffer _bb) { return GetRootAsRoleSkillData(_bb, new RoleSkillData()); }
  public static RoleSkillData GetRootAsRoleSkillData(ByteBuffer _bb, RoleSkillData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RoleSkillData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Skill.Flat.SkillData? List(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.Skill.Flat.SkillData?)(new PRO.Skill.Flat.SkillData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.Skill.Flat.RoleSkillData> CreateRoleSkillData(FlatBufferBuilder builder,
      VectorOffset listOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RoleSkillData.AddList(builder, listOffset);
    return RoleSkillData.EndRoleSkillData(builder);
  }

  public static void StartRoleSkillData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddList(FlatBufferBuilder builder, VectorOffset listOffset) { builder.AddOffset(0, listOffset.Value, 0); }
  public static VectorOffset CreateListVector(FlatBufferBuilder builder, Offset<PRO.Skill.Flat.SkillData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateListVectorBlock(FlatBufferBuilder builder, Offset<PRO.Skill.Flat.SkillData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateListVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<PRO.Skill.Flat.SkillData>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateListVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<PRO.Skill.Flat.SkillData>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.Skill.Flat.RoleSkillData> EndRoleSkillData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Skill.Flat.RoleSkillData>(o);
  }
}


static public class RoleSkillDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*List*/, PRO.Skill.Flat.SkillDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
