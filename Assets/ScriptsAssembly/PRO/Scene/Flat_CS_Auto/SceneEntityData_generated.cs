// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct SceneEntityData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static SceneEntityData GetRootAsSceneEntityData(ByteBuffer _bb) { return GetRootAsSceneEntityData(_bb, new SceneEntityData()); }
  public static SceneEntityData GetRootAsSceneEntityData(ByteBuffer _bb, SceneEntityData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SceneEntityData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector2Int? ActiveBlockBase(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.Flat.Vector2Int?)(new PRO.Flat.Vector2Int()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int ActiveBlockBaseLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.Flat.SceneEntityData> CreateSceneEntityData(FlatBufferBuilder builder,
      VectorOffset active_block_baseOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SceneEntityData.AddActiveBlockBase(builder, active_block_baseOffset);
    return SceneEntityData.EndSceneEntityData(builder);
  }

  public static void StartSceneEntityData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddActiveBlockBase(FlatBufferBuilder builder, VectorOffset activeBlockBaseOffset) { builder.AddOffset(0, activeBlockBaseOffset.Value, 0); }
  public static void StartActiveBlockBaseVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<PRO.Flat.SceneEntityData> EndSceneEntityData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.Flat.SceneEntityData>(o);
  }
}


static public class SceneEntityDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*ActiveBlockBase*/, 8 /*PRO.Flat.Vector2Int*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
