// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.AI.Flat
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public enum NodeBase : byte
{
  NONE = 0,
  Node = 1,
  TimeNode = 2,
};



static public class NodeBaseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((NodeBase)typeId)
    {
      case NodeBase.Node:
        result = PRO.AI.Flat.NodeVerify.Verify(verifier, tablePos);
        break;
      case NodeBase.TimeNode:
        result = PRO.AI.Flat.TimeNodeVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}

public enum Base : byte
{
  NONE = 0,
  A = 1,
  B = 2,
};



static public class BaseVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, byte typeId, uint tablePos)
  {
    bool result = true;
    switch((Base)typeId)
    {
      case Base.A:
        result = PRO.AI.Flat.AVerify.Verify(verifier, tablePos);
        break;
      case Base.B:
        result = PRO.AI.Flat.BVerify.Verify(verifier, tablePos);
        break;
      default: result = true;
        break;
    }
    return result;
  }
}

public struct Effect : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Effect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value0 { get { return __p.bb.GetInt(__p.bb_pos + 0); } }

  public static Offset<PRO.AI.Flat.Effect> CreateEffect(FlatBufferBuilder builder, int Value0) {
    builder.Prep(4, 4);
    builder.PutInt(Value0);
    return new Offset<PRO.AI.Flat.Effect>(builder.Offset);
  }
}

public struct TimeNode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static TimeNode GetRootAsTimeNode(ByteBuffer _bb) { return GetRootAsTimeNode(_bb, new TimeNode()); }
  public static TimeNode GetRootAsTimeNode(ByteBuffer _bb, TimeNode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TimeNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TurnTimeNum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TurnTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.AI.Flat.TimeNode> CreateTimeNode(FlatBufferBuilder builder,
      int turn_time_num = 0,
      int turn_time = 0) {
    builder.StartTable(2);
    TimeNode.AddTurnTime(builder, turn_time);
    TimeNode.AddTurnTimeNum(builder, turn_time_num);
    return TimeNode.EndTimeNode(builder);
  }

  public static void StartTimeNode(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTurnTimeNum(FlatBufferBuilder builder, int turnTimeNum) { builder.AddInt(0, turnTimeNum, 0); }
  public static void AddTurnTime(FlatBufferBuilder builder, int turnTime) { builder.AddInt(1, turnTime, 0); }
  public static Offset<PRO.AI.Flat.TimeNode> EndTimeNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.TimeNode>(o);
  }
}


static public class TimeNodeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TurnTimeNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 6 /*TurnTime*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TurnTimeNum { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Role { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetRoleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetRoleArray() { return __p.__vector_as_array<byte>(6); }
  public string Operate { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOperateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetOperateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetOperateArray() { return __p.__vector_as_array<byte>(8); }
  public byte Builder(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BuilderLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBuilderBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetBuilderBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetBuilderArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<PRO.AI.Flat.Node> CreateNode(FlatBufferBuilder builder,
      int turn_time_num = 0,
      StringOffset roleOffset = default(StringOffset),
      StringOffset operateOffset = default(StringOffset),
      VectorOffset builderOffset = default(VectorOffset)) {
    builder.StartTable(4);
    Node.AddBuilder(builder, builderOffset);
    Node.AddOperate(builder, operateOffset);
    Node.AddRole(builder, roleOffset);
    Node.AddTurnTimeNum(builder, turn_time_num);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTurnTimeNum(FlatBufferBuilder builder, int turnTimeNum) { builder.AddInt(0, turnTimeNum, 0); }
  public static void AddRole(FlatBufferBuilder builder, StringOffset roleOffset) { builder.AddOffset(1, roleOffset.Value, 0); }
  public static void AddOperate(FlatBufferBuilder builder, StringOffset operateOffset) { builder.AddOffset(2, operateOffset.Value, 0); }
  public static void AddBuilder(FlatBufferBuilder builder, VectorOffset builderOffset) { builder.AddOffset(3, builderOffset.Value, 0); }
  public static VectorOffset CreateBuilderVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBuilderVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuilderVectorBlock(FlatBufferBuilder builder, ArraySegment<byte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateBuilderVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<byte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartBuilderVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<PRO.AI.Flat.Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.Node>(o);
  }
}


static public class NodeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*TurnTimeNum*/, 4 /*int*/, 4, false)
      && verifier.VerifyString(tablePos, 6 /*Role*/, false)
      && verifier.VerifyString(tablePos, 8 /*Operate*/, false)
      && verifier.VerifyVectorOfData(tablePos, 10 /*Builder*/, 1 /*byte*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct Start_Cmd : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Start_Cmd GetRootAsStart_Cmd(ByteBuffer _bb) { return GetRootAsStart_Cmd(_bb, new Start_Cmd()); }
  public static Start_Cmd GetRootAsStart_Cmd(ByteBuffer _bb, Start_Cmd obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Start_Cmd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Path { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPathBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetPathBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetPathArray() { return __p.__vector_as_array<byte>(4); }
  public PRO.AI.Flat.NodeBase NodesType(int j) { int o = __p.__offset(6); return o != 0 ? (PRO.AI.Flat.NodeBase)__p.bb.Get(__p.__vector(o) + j * 1) : (PRO.AI.Flat.NodeBase)0; }
  public int NodesTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<PRO.AI.Flat.NodeBase> GetNodesTypeBytes() { return __p.__vector_as_span<PRO.AI.Flat.NodeBase>(6, 1); }
#else
  public ArraySegment<byte>? GetNodesTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public PRO.AI.Flat.NodeBase[] GetNodesTypeArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); PRO.AI.Flat.NodeBase[] a = new PRO.AI.Flat.NodeBase[l]; for (int i = 0; i < l; i++) { a[i] = (PRO.AI.Flat.NodeBase)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Nodes<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int NodesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.AI.Flat.Start_Cmd> CreateStart_Cmd(FlatBufferBuilder builder,
      StringOffset pathOffset = default(StringOffset),
      VectorOffset nodes_typeOffset = default(VectorOffset),
      VectorOffset nodesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Start_Cmd.AddNodes(builder, nodesOffset);
    Start_Cmd.AddNodesType(builder, nodes_typeOffset);
    Start_Cmd.AddPath(builder, pathOffset);
    return Start_Cmd.EndStart_Cmd(builder);
  }

  public static void StartStart_Cmd(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddPath(FlatBufferBuilder builder, StringOffset pathOffset) { builder.AddOffset(0, pathOffset.Value, 0); }
  public static void AddNodesType(FlatBufferBuilder builder, VectorOffset nodesTypeOffset) { builder.AddOffset(1, nodesTypeOffset.Value, 0); }
  public static VectorOffset CreateNodesTypeVector(FlatBufferBuilder builder, PRO.AI.Flat.NodeBase[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, PRO.AI.Flat.NodeBase[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<PRO.AI.Flat.NodeBase> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<PRO.AI.Flat.NodeBase>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNodesTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset) { builder.AddOffset(2, nodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.AI.Flat.Start_Cmd> EndStart_Cmd(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.Start_Cmd>(o);
  }
}


static public class Start_CmdVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Path*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*NodesType*/, 1 /*PRO.AI.Flat.NodeBase*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct Start_Rst : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Start_Rst GetRootAsStart_Rst(ByteBuffer _bb) { return GetRootAsStart_Rst(_bb, new Start_Rst()); }
  public static Start_Rst GetRootAsStart_Rst(ByteBuffer _bb, Start_Rst obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Start_Rst __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.AI.Flat.Effect? Effects(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.AI.Flat.Effect?)(new PRO.AI.Flat.Effect()).__assign(__p.__vector(o) + j * 4, __p.bb) : null; }
  public int EffectsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public PRO.AI.Flat.NodeBase NodesType(int j) { int o = __p.__offset(6); return o != 0 ? (PRO.AI.Flat.NodeBase)__p.bb.Get(__p.__vector(o) + j * 1) : (PRO.AI.Flat.NodeBase)0; }
  public int NodesTypeLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<PRO.AI.Flat.NodeBase> GetNodesTypeBytes() { return __p.__vector_as_span<PRO.AI.Flat.NodeBase>(6, 1); }
#else
  public ArraySegment<byte>? GetNodesTypeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public PRO.AI.Flat.NodeBase[] GetNodesTypeArray() { int o = __p.__offset(6); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); PRO.AI.Flat.NodeBase[] a = new PRO.AI.Flat.NodeBase[l]; for (int i = 0; i < l; i++) { a[i] = (PRO.AI.Flat.NodeBase)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Nodes<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int NodesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.AI.Flat.Start_Rst> CreateStart_Rst(FlatBufferBuilder builder,
      VectorOffset effectsOffset = default(VectorOffset),
      VectorOffset nodes_typeOffset = default(VectorOffset),
      VectorOffset nodesOffset = default(VectorOffset)) {
    builder.StartTable(3);
    Start_Rst.AddNodes(builder, nodesOffset);
    Start_Rst.AddNodesType(builder, nodes_typeOffset);
    Start_Rst.AddEffects(builder, effectsOffset);
    return Start_Rst.EndStart_Rst(builder);
  }

  public static void StartStart_Rst(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddEffects(FlatBufferBuilder builder, VectorOffset effectsOffset) { builder.AddOffset(0, effectsOffset.Value, 0); }
  public static void StartEffectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNodesType(FlatBufferBuilder builder, VectorOffset nodesTypeOffset) { builder.AddOffset(1, nodesTypeOffset.Value, 0); }
  public static VectorOffset CreateNodesTypeVector(FlatBufferBuilder builder, PRO.AI.Flat.NodeBase[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, PRO.AI.Flat.NodeBase[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<PRO.AI.Flat.NodeBase> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<PRO.AI.Flat.NodeBase>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNodesTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddNodes(FlatBufferBuilder builder, VectorOffset nodesOffset) { builder.AddOffset(2, nodesOffset.Value, 0); }
  public static VectorOffset CreateNodesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateNodesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartNodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.AI.Flat.Start_Rst> EndStart_Rst(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.Start_Rst>(o);
  }
}


static public class Start_RstVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Effects*/, 4 /*PRO.AI.Flat.Effect*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*NodesType*/, 1 /*PRO.AI.Flat.NodeBase*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct A : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static A GetRootAsA(ByteBuffer _bb) { return GetRootAsA(_bb, new A()); }
  public static A GetRootAsA(ByteBuffer _bb, A obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public A __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Value { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PRO.AI.Flat.A> CreateA(FlatBufferBuilder builder,
      int value = 0) {
    builder.StartTable(1);
    A.AddValue(builder, value);
    return A.EndA(builder);
  }

  public static void StartA(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(0, value, 0); }
  public static Offset<PRO.AI.Flat.A> EndA(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.A>(o);
  }
}


static public class AVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Value*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct B : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static B GetRootAsB(ByteBuffer _bb) { return GetRootAsB(_bb, new B()); }
  public static B GetRootAsB(ByteBuffer _bb, B obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public B __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Value { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetValueArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<PRO.AI.Flat.B> CreateB(FlatBufferBuilder builder,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartTable(1);
    B.AddValue(builder, valueOffset);
    return B.EndB(builder);
  }

  public static void StartB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(0, valueOffset.Value, 0); }
  public static Offset<PRO.AI.Flat.B> EndB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.B>(o);
  }
}


static public class BVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Value*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}
public struct Test : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Test GetRootAsTest(ByteBuffer _bb) { return GetRootAsTest(_bb, new Test()); }
  public static Test GetRootAsTest(ByteBuffer _bb, Test obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Test __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.AI.Flat.Base ValuesType(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.AI.Flat.Base)__p.bb.Get(__p.__vector(o) + j * 1) : (PRO.AI.Flat.Base)0; }
  public int ValuesTypeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<PRO.AI.Flat.Base> GetValuesTypeBytes() { return __p.__vector_as_span<PRO.AI.Flat.Base>(4, 1); }
#else
  public ArraySegment<byte>? GetValuesTypeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public PRO.AI.Flat.Base[] GetValuesTypeArray() { int o = __p.__offset(4); if (o == 0) return null; int p = __p.__vector(o); int l = __p.__vector_len(o); PRO.AI.Flat.Base[] a = new PRO.AI.Flat.Base[l]; for (int i = 0; i < l; i++) { a[i] = (PRO.AI.Flat.Base)__p.bb.Get(p + i * 1); } return a; }
  public TTable? Values<TTable>(int j) where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(__p.__vector(o) + j * 4) : null; }
  public int ValuesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<PRO.AI.Flat.Test> CreateTest(FlatBufferBuilder builder,
      VectorOffset values_typeOffset = default(VectorOffset),
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Test.AddValues(builder, valuesOffset);
    Test.AddValuesType(builder, values_typeOffset);
    return Test.EndTest(builder);
  }

  public static void StartTest(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddValuesType(FlatBufferBuilder builder, VectorOffset valuesTypeOffset) { builder.AddOffset(0, valuesTypeOffset.Value, 0); }
  public static VectorOffset CreateValuesTypeVector(FlatBufferBuilder builder, PRO.AI.Flat.Base[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte((byte)data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesTypeVectorBlock(FlatBufferBuilder builder, PRO.AI.Flat.Base[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesTypeVectorBlock(FlatBufferBuilder builder, ArraySegment<PRO.AI.Flat.Base> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesTypeVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<PRO.AI.Flat.Base>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesTypeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(1, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<int> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<int>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PRO.AI.Flat.Test> EndTest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.AI.Flat.Test>(o);
  }
}


static public class TestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*ValuesType*/, 1 /*PRO.AI.Flat.Base*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
