// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PRO.BT.Flat.Tool
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct NavNodeData : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public NavNodeData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Vector2Int GlobalPos { get { return (new PRO.Flat.Vector2Int()).__assign(__p.bb_pos + 0, __p.bb); } }
  public sbyte FallingHeight { get { return __p.bb.GetSbyte(__p.bb_pos + 8); } }

  public static Offset<PRO.BT.Flat.Tool.NavNodeData> CreateNavNodeData(FlatBufferBuilder builder, int global_pos_X, int global_pos_Y, sbyte FallingHeight) {
    builder.Prep(4, 12);
    builder.Pad(3);
    builder.PutSbyte(FallingHeight);
    builder.Prep(4, 8);
    builder.PutInt(global_pos_Y);
    builder.PutInt(global_pos_X);
    return new Offset<PRO.BT.Flat.Tool.NavNodeData>(builder.Offset);
  }
}

public struct SkillLogic_Move : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public SkillLogic_Move __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.Flat.Quaternion StartRotation { get { return (new PRO.Flat.Quaternion()).__assign(__p.bb_pos + 0, __p.bb); } }
  public PRO.Flat.DoTweenData_Quaternion DoTweenRotate { get { return (new PRO.Flat.DoTweenData_Quaternion()).__assign(__p.bb_pos + 16, __p.bb); } }

  public static Offset<PRO.BT.Flat.Tool.SkillLogic_Move> CreateSkillLogic_Move(FlatBufferBuilder builder, float start_rotation_X, float start_rotation_Y, float start_rotation_Z, float start_rotation_W, float do_tween_rotate_end_value_X, float do_tween_rotate_end_value_Y, float do_tween_rotate_end_value_Z, float do_tween_rotate_end_value_W, float do_tween_rotate_EndTime) {
    builder.Prep(4, 36);
    builder.Prep(4, 20);
    builder.PutFloat(do_tween_rotate_EndTime);
    builder.Prep(4, 16);
    builder.PutFloat(do_tween_rotate_end_value_W);
    builder.PutFloat(do_tween_rotate_end_value_Z);
    builder.PutFloat(do_tween_rotate_end_value_Y);
    builder.PutFloat(do_tween_rotate_end_value_X);
    builder.Prep(4, 16);
    builder.PutFloat(start_rotation_W);
    builder.PutFloat(start_rotation_Z);
    builder.PutFloat(start_rotation_Y);
    builder.PutFloat(start_rotation_X);
    return new Offset<PRO.BT.Flat.Tool.SkillLogic_Move>(builder.Offset);
  }
}

public struct MoveData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MoveData GetRootAsMoveData(ByteBuffer _bb) { return GetRootAsMoveData(_bb, new MoveData()); }
  public static MoveData GetRootAsMoveData(ByteBuffer _bb, MoveData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PRO.BT.Flat.Tool.NavNodeData? NavList(int j) { int o = __p.__offset(4); return o != 0 ? (PRO.BT.Flat.Tool.NavNodeData?)(new PRO.BT.Flat.Tool.NavNodeData()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int NavListLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Index { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float DeltaTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OldGravityScale { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public PRO.Flat.DoTweenData_Vector3? DoTweenerMove { get { int o = __p.__offset(12); return o != 0 ? (PRO.Flat.DoTweenData_Vector3?)(new PRO.Flat.DoTweenData_Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public PRO.Flat.Vector2Int? MoveTarget { get { int o = __p.__offset(14); return o != 0 ? (PRO.Flat.Vector2Int?)(new PRO.Flat.Vector2Int()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartMoveData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddNavList(FlatBufferBuilder builder, VectorOffset navListOffset) { builder.AddOffset(0, navListOffset.Value, 0); }
  public static void StartNavListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(1, index, 0); }
  public static void AddDeltaTime(FlatBufferBuilder builder, float deltaTime) { builder.AddFloat(2, deltaTime, 0.0f); }
  public static void AddOldGravityScale(FlatBufferBuilder builder, float oldGravityScale) { builder.AddFloat(3, oldGravityScale, 0.0f); }
  public static void AddDoTweenerMove(FlatBufferBuilder builder, Offset<PRO.Flat.DoTweenData_Vector3> doTweenerMoveOffset) { builder.AddStruct(4, doTweenerMoveOffset.Value, 0); }
  public static void AddMoveTarget(FlatBufferBuilder builder, Offset<PRO.Flat.Vector2Int> moveTargetOffset) { builder.AddStruct(5, moveTargetOffset.Value, 0); }
  public static Offset<PRO.BT.Flat.Tool.MoveData> EndMoveData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PRO.BT.Flat.Tool.MoveData>(o);
  }
}


static public class MoveDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*NavList*/, 12 /*PRO.BT.Flat.Tool.NavNodeData*/, false)
      && verifier.VerifyField(tablePos, 6 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 8 /*DeltaTime*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*OldGravityScale*/, 4 /*float*/, 4, false)
      && verifier.VerifyField(tablePos, 12 /*DoTweenerMove*/, 16 /*PRO.Flat.DoTweenData_Vector3*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*MoveTarget*/, 8 /*PRO.Flat.Vector2Int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
