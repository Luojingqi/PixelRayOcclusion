#include "../Random.hlsl"
#include "GetLine.hlsl"
#include "SetLightBuffer_Buffer.hlsl"
#pragma kernel SetLightResultBuffer1
[numthreads(3, 4, 1)]
void SetLightResultBuffer1(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line1];
  int sourceIndex = GetLine_1(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 1) return;
        float k = 0.1;
        float attenuation = pow((1 - d) / 1 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line1 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer2
[numthreads(5, 4, 1)]
void SetLightResultBuffer2(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line2];
  int sourceIndex = GetLine_2(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 2) return;
        float k = 0.1;
        float attenuation = pow((2 - d) / 2 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line2 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer3
[numthreads(7, 4, 1)]
void SetLightResultBuffer3(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line3];
  int sourceIndex = GetLine_3(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 3) return;
        float k = 0.1;
        float attenuation = pow((3 - d) / 3 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line3 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer4
[numthreads(9, 4, 1)]
void SetLightResultBuffer4(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line4];
  int sourceIndex = GetLine_4(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 4) return;
        float k = 0.1;
        float attenuation = pow((4 - d) / 4 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line4 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer5
[numthreads(11, 4, 1)]
void SetLightResultBuffer5(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line5];
  int sourceIndex = GetLine_5(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 5) return;
        float k = 0.1;
        float attenuation = pow((5 - d) / 5 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line5 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer6
[numthreads(13, 4, 1)]
void SetLightResultBuffer6(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line6];
  int sourceIndex = GetLine_6(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 6) return;
        float k = 0.1;
        float attenuation = pow((6 - d) / 6 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line6 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer7
[numthreads(15, 4, 1)]
void SetLightResultBuffer7(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line7];
  int sourceIndex = GetLine_7(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 7) return;
        float k = 0.1;
        float attenuation = pow((7 - d) / 7 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line7 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer8
[numthreads(17, 4, 1)]
void SetLightResultBuffer8(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line8];
  int sourceIndex = GetLine_8(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 8) return;
        float k = 0.1;
        float attenuation = pow((8 - d) / 8 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line8 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer9
[numthreads(19, 4, 1)]
void SetLightResultBuffer9(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line9];
  int sourceIndex = GetLine_9(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 9) return;
        float k = 0.1;
        float attenuation = pow((9 - d) / 9 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line9 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer10
[numthreads(21, 4, 1)]
void SetLightResultBuffer10(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line10];
  int sourceIndex = GetLine_10(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 10) return;
        float k = 0.1;
        float attenuation = pow((10 - d) / 10 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line10 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer11
[numthreads(23, 4, 1)]
void SetLightResultBuffer11(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line11];
  int sourceIndex = GetLine_11(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 11) return;
        float k = 0.1;
        float attenuation = pow((11 - d) / 11 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line11 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer12
[numthreads(25, 4, 1)]
void SetLightResultBuffer12(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line12];
  int sourceIndex = GetLine_12(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 12) return;
        float k = 0.1;
        float attenuation = pow((12 - d) / 12 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line12 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer13
[numthreads(27, 4, 1)]
void SetLightResultBuffer13(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line13];
  int sourceIndex = GetLine_13(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 13) return;
        float k = 0.1;
        float attenuation = pow((13 - d) / 13 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line13 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer14
[numthreads(29, 4, 1)]
void SetLightResultBuffer14(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line14];
  int sourceIndex = GetLine_14(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 14) return;
        float k = 0.1;
        float attenuation = pow((14 - d) / 14 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line14 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer15
[numthreads(31, 4, 1)]
void SetLightResultBuffer15(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line15];
  int sourceIndex = GetLine_15(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 15) return;
        float k = 0.1;
        float attenuation = pow((15 - d) / 15 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line15 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer16
[numthreads(33, 4, 1)]
void SetLightResultBuffer16(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line16];
  int sourceIndex = GetLine_16(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 16) return;
        float k = 0.1;
        float attenuation = pow((16 - d) / 16 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line16 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer17
[numthreads(35, 4, 1)]
void SetLightResultBuffer17(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line17];
  int sourceIndex = GetLine_17(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 17) return;
        float k = 0.1;
        float attenuation = pow((17 - d) / 17 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line17 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer18
[numthreads(37, 4, 1)]
void SetLightResultBuffer18(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line18];
  int sourceIndex = GetLine_18(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 18) return;
        float k = 0.1;
        float attenuation = pow((18 - d) / 18 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line18 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer19
[numthreads(39, 4, 1)]
void SetLightResultBuffer19(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line19];
  int sourceIndex = GetLine_19(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 19) return;
        float k = 0.1;
        float attenuation = pow((19 - d) / 19 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line19 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer20
[numthreads(41, 4, 1)]
void SetLightResultBuffer20(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line20];
  int sourceIndex = GetLine_20(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 20) return;
        float k = 0.1;
        float attenuation = pow((20 - d) / 20 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line20 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer21
[numthreads(43, 4, 1)]
void SetLightResultBuffer21(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line21];
  int sourceIndex = GetLine_21(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 21) return;
        float k = 0.1;
        float attenuation = pow((21 - d) / 21 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line21 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer22
[numthreads(45, 4, 1)]
void SetLightResultBuffer22(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line22];
  int sourceIndex = GetLine_22(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 22) return;
        float k = 0.1;
        float attenuation = pow((22 - d) / 22 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line22 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer23
[numthreads(47, 4, 1)]
void SetLightResultBuffer23(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line23];
  int sourceIndex = GetLine_23(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 23) return;
        float k = 0.1;
        float attenuation = pow((23 - d) / 23 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line23 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer24
[numthreads(49, 4, 1)]
void SetLightResultBuffer24(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line24];
  int sourceIndex = GetLine_24(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 24) return;
        float k = 0.1;
        float attenuation = pow((24 - d) / 24 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line24 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer25
[numthreads(51, 4, 1)]
void SetLightResultBuffer25(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line25];
  int sourceIndex = GetLine_25(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 25) return;
        float k = 0.1;
        float attenuation = pow((25 - d) / 25 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line25 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer26
[numthreads(53, 4, 1)]
void SetLightResultBuffer26(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line26];
  int sourceIndex = GetLine_26(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 26) return;
        float k = 0.1;
        float attenuation = pow((26 - d) / 26 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line26 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer27
[numthreads(55, 4, 1)]
void SetLightResultBuffer27(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line27];
  int sourceIndex = GetLine_27(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 27) return;
        float k = 0.1;
        float attenuation = pow((27 - d) / 27 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line27 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer28
[numthreads(57, 4, 1)]
void SetLightResultBuffer28(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line28];
  int sourceIndex = GetLine_28(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 28) return;
        float k = 0.1;
        float attenuation = pow((28 - d) / 28 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line28 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer29
[numthreads(59, 4, 1)]
void SetLightResultBuffer29(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line29];
  int sourceIndex = GetLine_29(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 29) return;
        float k = 0.1;
        float attenuation = pow((29 - d) / 29 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line29 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer30
[numthreads(61, 4, 1)]
void SetLightResultBuffer30(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line30];
  int sourceIndex = GetLine_30(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 30) return;
        float k = 0.1;
        float attenuation = pow((30 - d) / 30 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line30 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer31
[numthreads(63, 4, 1)]
void SetLightResultBuffer31(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line31];
  int sourceIndex = GetLine_31(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 31) return;
        float k = 0.1;
        float attenuation = pow((31 - d) / 31 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line31 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer32
[numthreads(64, 4, 1)]
void SetLightResultBuffer32(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line32];
  int sourceIndex = GetLine_32(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 32) return;
        float k = 0.1;
        float attenuation = pow((32 - d) / 32 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line32 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer33
[numthreads(64, 4, 1)]
void SetLightResultBuffer33(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line33];
  int sourceIndex = GetLine_33(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 33) return;
        float k = 0.1;
        float attenuation = pow((33 - d) / 33 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line33 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer34
[numthreads(64, 4, 1)]
void SetLightResultBuffer34(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line34];
  int sourceIndex = GetLine_34(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 34) return;
        float k = 0.1;
        float attenuation = pow((34 - d) / 34 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line34 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer35
[numthreads(64, 4, 1)]
void SetLightResultBuffer35(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line35];
  int sourceIndex = GetLine_35(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 35) return;
        float k = 0.1;
        float attenuation = pow((35 - d) / 35 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line35 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer36
[numthreads(64, 4, 1)]
void SetLightResultBuffer36(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line36];
  int sourceIndex = GetLine_36(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 36) return;
        float k = 0.1;
        float attenuation = pow((36 - d) / 36 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line36 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer37
[numthreads(64, 4, 1)]
void SetLightResultBuffer37(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line37];
  int sourceIndex = GetLine_37(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 37) return;
        float k = 0.1;
        float attenuation = pow((37 - d) / 37 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line37 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer38
[numthreads(64, 4, 1)]
void SetLightResultBuffer38(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line38];
  int sourceIndex = GetLine_38(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 38) return;
        float k = 0.1;
        float attenuation = pow((38 - d) / 38 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line38 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer39
[numthreads(64, 4, 1)]
void SetLightResultBuffer39(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line39];
  int sourceIndex = GetLine_39(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 39) return;
        float k = 0.1;
        float attenuation = pow((39 - d) / 39 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line39 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer40
[numthreads(64, 4, 1)]
void SetLightResultBuffer40(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line40];
  int sourceIndex = GetLine_40(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 40) return;
        float k = 0.1;
        float attenuation = pow((40 - d) / 40 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line40 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer41
[numthreads(64, 4, 1)]
void SetLightResultBuffer41(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line41];
  int sourceIndex = GetLine_41(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 41) return;
        float k = 0.1;
        float attenuation = pow((41 - d) / 41 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line41 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer42
[numthreads(64, 4, 1)]
void SetLightResultBuffer42(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line42];
  int sourceIndex = GetLine_42(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 42) return;
        float k = 0.1;
        float attenuation = pow((42 - d) / 42 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line42 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer43
[numthreads(64, 4, 1)]
void SetLightResultBuffer43(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line43];
  int sourceIndex = GetLine_43(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 43) return;
        float k = 0.1;
        float attenuation = pow((43 - d) / 43 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line43 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer44
[numthreads(64, 4, 1)]
void SetLightResultBuffer44(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line44];
  int sourceIndex = GetLine_44(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 44) return;
        float k = 0.1;
        float attenuation = pow((44 - d) / 44 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line44 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer45
[numthreads(64, 4, 1)]
void SetLightResultBuffer45(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line45];
  int sourceIndex = GetLine_45(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 45) return;
        float k = 0.1;
        float attenuation = pow((45 - d) / 45 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line45 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer46
[numthreads(64, 4, 1)]
void SetLightResultBuffer46(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line46];
  int sourceIndex = GetLine_46(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 46) return;
        float k = 0.1;
        float attenuation = pow((46 - d) / 46 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line46 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer47
[numthreads(64, 4, 1)]
void SetLightResultBuffer47(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line47];
  int sourceIndex = GetLine_47(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 47) return;
        float k = 0.1;
        float attenuation = pow((47 - d) / 47 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line47 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer48
[numthreads(64, 4, 1)]
void SetLightResultBuffer48(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line48];
  int sourceIndex = GetLine_48(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 48) return;
        float k = 0.1;
        float attenuation = pow((48 - d) / 48 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line48 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer49
[numthreads(64, 4, 1)]
void SetLightResultBuffer49(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line49];
  int sourceIndex = GetLine_49(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 49) return;
        float k = 0.1;
        float attenuation = pow((49 - d) / 49 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line49 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer50
[numthreads(64, 4, 1)]
void SetLightResultBuffer50(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line50];
  int sourceIndex = GetLine_50(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 50) return;
        float k = 0.1;
        float attenuation = pow((50 - d) / 50 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line50 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer51
[numthreads(64, 4, 1)]
void SetLightResultBuffer51(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line51];
  int sourceIndex = GetLine_51(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 51) return;
        float k = 0.1;
        float attenuation = pow((51 - d) / 51 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line51 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer52
[numthreads(64, 4, 1)]
void SetLightResultBuffer52(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line52];
  int sourceIndex = GetLine_52(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 52) return;
        float k = 0.1;
        float attenuation = pow((52 - d) / 52 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line52 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer53
[numthreads(64, 4, 1)]
void SetLightResultBuffer53(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line53];
  int sourceIndex = GetLine_53(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 53) return;
        float k = 0.1;
        float attenuation = pow((53 - d) / 53 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line53 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer54
[numthreads(64, 4, 1)]
void SetLightResultBuffer54(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line54];
  int sourceIndex = GetLine_54(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 54) return;
        float k = 0.1;
        float attenuation = pow((54 - d) / 54 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line54 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer55
[numthreads(64, 4, 1)]
void SetLightResultBuffer55(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line55];
  int sourceIndex = GetLine_55(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 55) return;
        float k = 0.1;
        float attenuation = pow((55 - d) / 55 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line55 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer56
[numthreads(64, 4, 1)]
void SetLightResultBuffer56(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line56];
  int sourceIndex = GetLine_56(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 56) return;
        float k = 0.1;
        float attenuation = pow((56 - d) / 56 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line56 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer57
[numthreads(64, 4, 1)]
void SetLightResultBuffer57(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line57];
  int sourceIndex = GetLine_57(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 57) return;
        float k = 0.1;
        float attenuation = pow((57 - d) / 57 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line57 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer58
[numthreads(64, 4, 1)]
void SetLightResultBuffer58(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line58];
  int sourceIndex = GetLine_58(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 58) return;
        float k = 0.1;
        float attenuation = pow((58 - d) / 58 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line58 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer59
[numthreads(64, 4, 1)]
void SetLightResultBuffer59(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line59];
  int sourceIndex = GetLine_59(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 59) return;
        float k = 0.1;
        float attenuation = pow((59 - d) / 59 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line59 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer60
[numthreads(64, 4, 1)]
void SetLightResultBuffer60(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line60];
  int sourceIndex = GetLine_60(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 60) return;
        float k = 0.1;
        float attenuation = pow((60 - d) / 60 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line60 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer61
[numthreads(64, 4, 1)]
void SetLightResultBuffer61(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line61];
  int sourceIndex = GetLine_61(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 61) return;
        float k = 0.1;
        float attenuation = pow((61 - d) / 61 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line61 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer62
[numthreads(64, 4, 1)]
void SetLightResultBuffer62(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line62];
  int sourceIndex = GetLine_62(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 62) return;
        float k = 0.1;
        float attenuation = pow((62 - d) / 62 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line62 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer63
[numthreads(64, 4, 1)]
void SetLightResultBuffer63(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line63];
  int sourceIndex = GetLine_63(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 63) return;
        float k = 0.1;
        float attenuation = pow((63 - d) / 63 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line63 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer64
[numthreads(64, 4, 1)]
void SetLightResultBuffer64(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line64];
  int sourceIndex = GetLine_64(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 64) return;
        float k = 0.1;
        float attenuation = pow((64 - d) / 64 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line64 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer65
[numthreads(64, 4, 1)]
void SetLightResultBuffer65(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line65];
  int sourceIndex = GetLine_65(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 65) return;
        float k = 0.1;
        float attenuation = pow((65 - d) / 65 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line65 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer66
[numthreads(64, 4, 1)]
void SetLightResultBuffer66(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line66];
  int sourceIndex = GetLine_66(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 66) return;
        float k = 0.1;
        float attenuation = pow((66 - d) / 66 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line66 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer67
[numthreads(64, 4, 1)]
void SetLightResultBuffer67(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line67];
  int sourceIndex = GetLine_67(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 67) return;
        float k = 0.1;
        float attenuation = pow((67 - d) / 67 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line67 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer68
[numthreads(64, 4, 1)]
void SetLightResultBuffer68(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line68];
  int sourceIndex = GetLine_68(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 68) return;
        float k = 0.1;
        float attenuation = pow((68 - d) / 68 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line68 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer69
[numthreads(64, 4, 1)]
void SetLightResultBuffer69(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line69];
  int sourceIndex = GetLine_69(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 69) return;
        float k = 0.1;
        float attenuation = pow((69 - d) / 69 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line69 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer70
[numthreads(64, 4, 1)]
void SetLightResultBuffer70(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line70];
  int sourceIndex = GetLine_70(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 70) return;
        float k = 0.1;
        float attenuation = pow((70 - d) / 70 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line70 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer71
[numthreads(64, 4, 1)]
void SetLightResultBuffer71(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line71];
  int sourceIndex = GetLine_71(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 71) return;
        float k = 0.1;
        float attenuation = pow((71 - d) / 71 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line71 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer72
[numthreads(64, 4, 1)]
void SetLightResultBuffer72(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line72];
  int sourceIndex = GetLine_72(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 72) return;
        float k = 0.1;
        float attenuation = pow((72 - d) / 72 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line72 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer73
[numthreads(64, 4, 1)]
void SetLightResultBuffer73(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line73];
  int sourceIndex = GetLine_73(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 73) return;
        float k = 0.1;
        float attenuation = pow((73 - d) / 73 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line73 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer74
[numthreads(64, 4, 1)]
void SetLightResultBuffer74(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line74];
  int sourceIndex = GetLine_74(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 74) return;
        float k = 0.1;
        float attenuation = pow((74 - d) / 74 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line74 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer75
[numthreads(64, 4, 1)]
void SetLightResultBuffer75(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line75];
  int sourceIndex = GetLine_75(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 75) return;
        float k = 0.1;
        float attenuation = pow((75 - d) / 75 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line75 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer76
[numthreads(64, 4, 1)]
void SetLightResultBuffer76(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line76];
  int sourceIndex = GetLine_76(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 76) return;
        float k = 0.1;
        float attenuation = pow((76 - d) / 76 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line76 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer77
[numthreads(64, 4, 1)]
void SetLightResultBuffer77(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line77];
  int sourceIndex = GetLine_77(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 77) return;
        float k = 0.1;
        float attenuation = pow((77 - d) / 77 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line77 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer78
[numthreads(64, 4, 1)]
void SetLightResultBuffer78(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line78];
  int sourceIndex = GetLine_78(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 78) return;
        float k = 0.1;
        float attenuation = pow((78 - d) / 78 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line78 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer79
[numthreads(64, 4, 1)]
void SetLightResultBuffer79(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line79];
  int sourceIndex = GetLine_79(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 79) return;
        float k = 0.1;
        float attenuation = pow((79 - d) / 79 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line79 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer80
[numthreads(64, 4, 1)]
void SetLightResultBuffer80(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line80];
  int sourceIndex = GetLine_80(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 80) return;
        float k = 0.1;
        float attenuation = pow((80 - d) / 80 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line80 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer81
[numthreads(64, 4, 1)]
void SetLightResultBuffer81(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line81];
  int sourceIndex = GetLine_81(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 81) return;
        float k = 0.1;
        float attenuation = pow((81 - d) / 81 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line81 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer82
[numthreads(64, 4, 1)]
void SetLightResultBuffer82(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line82];
  int sourceIndex = GetLine_82(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 82) return;
        float k = 0.1;
        float attenuation = pow((82 - d) / 82 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line82 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer83
[numthreads(64, 4, 1)]
void SetLightResultBuffer83(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line83];
  int sourceIndex = GetLine_83(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 83) return;
        float k = 0.1;
        float attenuation = pow((83 - d) / 83 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line83 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer84
[numthreads(64, 4, 1)]
void SetLightResultBuffer84(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line84];
  int sourceIndex = GetLine_84(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 84) return;
        float k = 0.1;
        float attenuation = pow((84 - d) / 84 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line84 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer85
[numthreads(64, 4, 1)]
void SetLightResultBuffer85(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line85];
  int sourceIndex = GetLine_85(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 85) return;
        float k = 0.1;
        float attenuation = pow((85 - d) / 85 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line85 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer86
[numthreads(64, 4, 1)]
void SetLightResultBuffer86(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line86];
  int sourceIndex = GetLine_86(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 86) return;
        float k = 0.1;
        float attenuation = pow((86 - d) / 86 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line86 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer87
[numthreads(64, 4, 1)]
void SetLightResultBuffer87(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line87];
  int sourceIndex = GetLine_87(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 87) return;
        float k = 0.1;
        float attenuation = pow((87 - d) / 87 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line87 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer88
[numthreads(64, 4, 1)]
void SetLightResultBuffer88(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line88];
  int sourceIndex = GetLine_88(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 88) return;
        float k = 0.1;
        float attenuation = pow((88 - d) / 88 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line88 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer89
[numthreads(64, 4, 1)]
void SetLightResultBuffer89(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line89];
  int sourceIndex = GetLine_89(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 89) return;
        float k = 0.1;
        float attenuation = pow((89 - d) / 89 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line89 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer90
[numthreads(64, 4, 1)]
void SetLightResultBuffer90(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line90];
  int sourceIndex = GetLine_90(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 90) return;
        float k = 0.1;
        float attenuation = pow((90 - d) / 90 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line90 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer91
[numthreads(64, 4, 1)]
void SetLightResultBuffer91(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line91];
  int sourceIndex = GetLine_91(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 91) return;
        float k = 0.1;
        float attenuation = pow((91 - d) / 91 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line91 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer92
[numthreads(64, 4, 1)]
void SetLightResultBuffer92(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line92];
  int sourceIndex = GetLine_92(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 92) return;
        float k = 0.1;
        float attenuation = pow((92 - d) / 92 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line92 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer93
[numthreads(64, 4, 1)]
void SetLightResultBuffer93(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line93];
  int sourceIndex = GetLine_93(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 93) return;
        float k = 0.1;
        float attenuation = pow((93 - d) / 93 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line93 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer94
[numthreads(64, 4, 1)]
void SetLightResultBuffer94(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line94];
  int sourceIndex = GetLine_94(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 94) return;
        float k = 0.1;
        float attenuation = pow((94 - d) / 94 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line94 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer95
[numthreads(64, 4, 1)]
void SetLightResultBuffer95(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line95];
  int sourceIndex = GetLine_95(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 95) return;
        float k = 0.1;
        float attenuation = pow((95 - d) / 95 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line95 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer96
[numthreads(64, 4, 1)]
void SetLightResultBuffer96(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line96];
  int sourceIndex = GetLine_96(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 96) return;
        float k = 0.1;
        float attenuation = pow((96 - d) / 96 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line96 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer97
[numthreads(64, 4, 1)]
void SetLightResultBuffer97(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line97];
  int sourceIndex = GetLine_97(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 97) return;
        float k = 0.1;
        float attenuation = pow((97 - d) / 97 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line97 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer98
[numthreads(64, 4, 1)]
void SetLightResultBuffer98(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line98];
  int sourceIndex = GetLine_98(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 98) return;
        float k = 0.1;
        float attenuation = pow((98 - d) / 98 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line98 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer99
[numthreads(64, 4, 1)]
void SetLightResultBuffer99(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line99];
  int sourceIndex = GetLine_99(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 99) return;
        float k = 0.1;
        float attenuation = pow((99 - d) / 99 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line99 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer100
[numthreads(64, 4, 1)]
void SetLightResultBuffer100(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line100];
  int sourceIndex = GetLine_100(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 100) return;
        float k = 0.1;
        float attenuation = pow((100 - d) / 100 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line100 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer101
[numthreads(64, 4, 1)]
void SetLightResultBuffer101(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line101];
  int sourceIndex = GetLine_101(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 101) return;
        float k = 0.1;
        float attenuation = pow((101 - d) / 101 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line101 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer102
[numthreads(64, 4, 1)]
void SetLightResultBuffer102(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line102];
  int sourceIndex = GetLine_102(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 102) return;
        float k = 0.1;
        float attenuation = pow((102 - d) / 102 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line102 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer103
[numthreads(64, 4, 1)]
void SetLightResultBuffer103(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line103];
  int sourceIndex = GetLine_103(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 103) return;
        float k = 0.1;
        float attenuation = pow((103 - d) / 103 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line103 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer104
[numthreads(64, 4, 1)]
void SetLightResultBuffer104(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line104];
  int sourceIndex = GetLine_104(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 104) return;
        float k = 0.1;
        float attenuation = pow((104 - d) / 104 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line104 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer105
[numthreads(64, 4, 1)]
void SetLightResultBuffer105(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line105];
  int sourceIndex = GetLine_105(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 105) return;
        float k = 0.1;
        float attenuation = pow((105 - d) / 105 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line105 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer106
[numthreads(64, 4, 1)]
void SetLightResultBuffer106(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line106];
  int sourceIndex = GetLine_106(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 106) return;
        float k = 0.1;
        float attenuation = pow((106 - d) / 106 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line106 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer107
[numthreads(64, 4, 1)]
void SetLightResultBuffer107(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line107];
  int sourceIndex = GetLine_107(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 107) return;
        float k = 0.1;
        float attenuation = pow((107 - d) / 107 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line107 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer108
[numthreads(64, 4, 1)]
void SetLightResultBuffer108(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line108];
  int sourceIndex = GetLine_108(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 108) return;
        float k = 0.1;
        float attenuation = pow((108 - d) / 108 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line108 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer109
[numthreads(64, 4, 1)]
void SetLightResultBuffer109(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line109];
  int sourceIndex = GetLine_109(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 109) return;
        float k = 0.1;
        float attenuation = pow((109 - d) / 109 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line109 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer110
[numthreads(64, 4, 1)]
void SetLightResultBuffer110(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line110];
  int sourceIndex = GetLine_110(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 110) return;
        float k = 0.1;
        float attenuation = pow((110 - d) / 110 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line110 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer111
[numthreads(64, 4, 1)]
void SetLightResultBuffer111(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line111];
  int sourceIndex = GetLine_111(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 111) return;
        float k = 0.1;
        float attenuation = pow((111 - d) / 111 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line111 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer112
[numthreads(64, 4, 1)]
void SetLightResultBuffer112(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line112];
  int sourceIndex = GetLine_112(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 112) return;
        float k = 0.1;
        float attenuation = pow((112 - d) / 112 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line112 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer113
[numthreads(64, 4, 1)]
void SetLightResultBuffer113(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line113];
  int sourceIndex = GetLine_113(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 113) return;
        float k = 0.1;
        float attenuation = pow((113 - d) / 113 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line113 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer114
[numthreads(64, 4, 1)]
void SetLightResultBuffer114(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line114];
  int sourceIndex = GetLine_114(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 114) return;
        float k = 0.1;
        float attenuation = pow((114 - d) / 114 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line114 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer115
[numthreads(64, 4, 1)]
void SetLightResultBuffer115(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line115];
  int sourceIndex = GetLine_115(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 115) return;
        float k = 0.1;
        float attenuation = pow((115 - d) / 115 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line115 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer116
[numthreads(64, 4, 1)]
void SetLightResultBuffer116(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line116];
  int sourceIndex = GetLine_116(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 116) return;
        float k = 0.1;
        float attenuation = pow((116 - d) / 116 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line116 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer117
[numthreads(64, 4, 1)]
void SetLightResultBuffer117(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line117];
  int sourceIndex = GetLine_117(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 117) return;
        float k = 0.1;
        float attenuation = pow((117 - d) / 117 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line117 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer118
[numthreads(64, 4, 1)]
void SetLightResultBuffer118(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line118];
  int sourceIndex = GetLine_118(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 118) return;
        float k = 0.1;
        float attenuation = pow((118 - d) / 118 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line118 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer119
[numthreads(64, 4, 1)]
void SetLightResultBuffer119(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line119];
  int sourceIndex = GetLine_119(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 119) return;
        float k = 0.1;
        float attenuation = pow((119 - d) / 119 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line119 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer120
[numthreads(64, 4, 1)]
void SetLightResultBuffer120(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line120];
  int sourceIndex = GetLine_120(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 120) return;
        float k = 0.1;
        float attenuation = pow((120 - d) / 120 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line120 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer121
[numthreads(64, 4, 1)]
void SetLightResultBuffer121(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line121];
  int sourceIndex = GetLine_121(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 121) return;
        float k = 0.1;
        float attenuation = pow((121 - d) / 121 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line121 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer122
[numthreads(64, 4, 1)]
void SetLightResultBuffer122(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line122];
  int sourceIndex = GetLine_122(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 122) return;
        float k = 0.1;
        float attenuation = pow((122 - d) / 122 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line122 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer123
[numthreads(64, 4, 1)]
void SetLightResultBuffer123(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line123];
  int sourceIndex = GetLine_123(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 123) return;
        float k = 0.1;
        float attenuation = pow((123 - d) / 123 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line123 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer124
[numthreads(64, 4, 1)]
void SetLightResultBuffer124(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line124];
  int sourceIndex = GetLine_124(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 124) return;
        float k = 0.1;
        float attenuation = pow((124 - d) / 124 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line124 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer125
[numthreads(64, 4, 1)]
void SetLightResultBuffer125(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line125];
  int sourceIndex = GetLine_125(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 125) return;
        float k = 0.1;
        float attenuation = pow((125 - d) / 125 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line125 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer126
[numthreads(64, 4, 1)]
void SetLightResultBuffer126(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line126];
  int sourceIndex = GetLine_126(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 126) return;
        float k = 0.1;
        float attenuation = pow((126 - d) / 126 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line126 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer127
[numthreads(64, 4, 1)]
void SetLightResultBuffer127(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line127];
  int sourceIndex = GetLine_127(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 127) return;
        float k = 0.1;
        float attenuation = pow((127 - d) / 127 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line127 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

#pragma kernel SetLightResultBuffer128
[numthreads(64, 4, 1)]
void SetLightResultBuffer128(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 globalPos = IDToGloabPos(id.xy);
    int2 lineArray[Line128];
  int sourceIndex = GetLine_128(globalPos, source.globalPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = -1;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
     float d = distance(lineArray[i], lineArray[sourceIndex]);
        if(d > 128) return;
        float k = 0.1;
        float attenuation = pow((128 - d) / 128 , 1.5) ;
      float weak =  pow(clamp(1 - d / (Line128 - 1), 0, 1), 1);
      
        int3 color = filterColor * 255 * attenuation * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        BlockPixelInfo pixelInfo = GetBlockPixelInfo(lineArray[i]);
        PixelColorInfo colorInfo = GetPixelColorInfo(pixelInfo.colorInfoId);
        if(colorInfo.affectsLightIntensity != lastAffects)
        {
            float4 infoColor = colorInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - colorInfo.lightPathColorMixing) + infoColor.xyz * colorInfo.lightPathColorMixing , filterColor.xyz);
            float affectsLightIntensity = colorInfo.affectsLightIntensity * pow(pixelInfo.durability , 0.75);
            shadow *= (1 - affectsLightIntensity);
            lastAffects = affectsLightIntensity;
        }
    }
}

