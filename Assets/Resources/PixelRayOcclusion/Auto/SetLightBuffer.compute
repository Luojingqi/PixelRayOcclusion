#include "../Random.hlsl"
#include "GetLine.hlsl"
#include "SetLightBuffer_Buffer.hlsl"
#pragma kernel SetLightResultBuffer1
[numthreads(3, 4, 1)]
void SetLightResultBuffer1(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line1];
  int sourceIndex = GetLine_1(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line1 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer2
[numthreads(5, 4, 1)]
void SetLightResultBuffer2(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line2];
  int sourceIndex = GetLine_2(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line2 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer3
[numthreads(7, 4, 1)]
void SetLightResultBuffer3(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line3];
  int sourceIndex = GetLine_3(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line3 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer4
[numthreads(9, 4, 1)]
void SetLightResultBuffer4(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line4];
  int sourceIndex = GetLine_4(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line4 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer5
[numthreads(11, 4, 1)]
void SetLightResultBuffer5(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line5];
  int sourceIndex = GetLine_5(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line5 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer6
[numthreads(13, 4, 1)]
void SetLightResultBuffer6(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line6];
  int sourceIndex = GetLine_6(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line6 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer7
[numthreads(15, 4, 1)]
void SetLightResultBuffer7(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line7];
  int sourceIndex = GetLine_7(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line7 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer8
[numthreads(17, 4, 1)]
void SetLightResultBuffer8(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line8];
  int sourceIndex = GetLine_8(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line8 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer9
[numthreads(19, 4, 1)]
void SetLightResultBuffer9(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line9];
  int sourceIndex = GetLine_9(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line9 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer10
[numthreads(21, 4, 1)]
void SetLightResultBuffer10(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line10];
  int sourceIndex = GetLine_10(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line10 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer11
[numthreads(23, 4, 1)]
void SetLightResultBuffer11(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line11];
  int sourceIndex = GetLine_11(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line11 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer12
[numthreads(25, 4, 1)]
void SetLightResultBuffer12(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line12];
  int sourceIndex = GetLine_12(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line12 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer13
[numthreads(27, 4, 1)]
void SetLightResultBuffer13(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line13];
  int sourceIndex = GetLine_13(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line13 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer14
[numthreads(29, 4, 1)]
void SetLightResultBuffer14(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line14];
  int sourceIndex = GetLine_14(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line14 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer15
[numthreads(31, 4, 1)]
void SetLightResultBuffer15(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line15];
  int sourceIndex = GetLine_15(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line15 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer16
[numthreads(33, 4, 1)]
void SetLightResultBuffer16(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line16];
  int sourceIndex = GetLine_16(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line16 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer17
[numthreads(35, 4, 1)]
void SetLightResultBuffer17(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line17];
  int sourceIndex = GetLine_17(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line17 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer18
[numthreads(37, 4, 1)]
void SetLightResultBuffer18(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line18];
  int sourceIndex = GetLine_18(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line18 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer19
[numthreads(39, 4, 1)]
void SetLightResultBuffer19(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line19];
  int sourceIndex = GetLine_19(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line19 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer20
[numthreads(41, 4, 1)]
void SetLightResultBuffer20(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line20];
  int sourceIndex = GetLine_20(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line20 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer21
[numthreads(43, 4, 1)]
void SetLightResultBuffer21(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line21];
  int sourceIndex = GetLine_21(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line21 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer22
[numthreads(45, 4, 1)]
void SetLightResultBuffer22(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line22];
  int sourceIndex = GetLine_22(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line22 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer23
[numthreads(47, 4, 1)]
void SetLightResultBuffer23(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line23];
  int sourceIndex = GetLine_23(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line23 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer24
[numthreads(49, 4, 1)]
void SetLightResultBuffer24(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line24];
  int sourceIndex = GetLine_24(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line24 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer25
[numthreads(51, 4, 1)]
void SetLightResultBuffer25(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line25];
  int sourceIndex = GetLine_25(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line25 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer26
[numthreads(53, 4, 1)]
void SetLightResultBuffer26(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line26];
  int sourceIndex = GetLine_26(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line26 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer27
[numthreads(55, 4, 1)]
void SetLightResultBuffer27(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line27];
  int sourceIndex = GetLine_27(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line27 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer28
[numthreads(57, 4, 1)]
void SetLightResultBuffer28(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line28];
  int sourceIndex = GetLine_28(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line28 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer29
[numthreads(59, 4, 1)]
void SetLightResultBuffer29(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line29];
  int sourceIndex = GetLine_29(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line29 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer30
[numthreads(61, 4, 1)]
void SetLightResultBuffer30(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line30];
  int sourceIndex = GetLine_30(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line30 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer31
[numthreads(63, 4, 1)]
void SetLightResultBuffer31(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line31];
  int sourceIndex = GetLine_31(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line31 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer32
[numthreads(64, 4, 1)]
void SetLightResultBuffer32(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line32];
  int sourceIndex = GetLine_32(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line32 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer33
[numthreads(64, 4, 1)]
void SetLightResultBuffer33(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line33];
  int sourceIndex = GetLine_33(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line33 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer34
[numthreads(64, 4, 1)]
void SetLightResultBuffer34(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line34];
  int sourceIndex = GetLine_34(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line34 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer35
[numthreads(64, 4, 1)]
void SetLightResultBuffer35(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line35];
  int sourceIndex = GetLine_35(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line35 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer36
[numthreads(64, 4, 1)]
void SetLightResultBuffer36(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line36];
  int sourceIndex = GetLine_36(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line36 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer37
[numthreads(64, 4, 1)]
void SetLightResultBuffer37(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line37];
  int sourceIndex = GetLine_37(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line37 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer38
[numthreads(64, 4, 1)]
void SetLightResultBuffer38(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line38];
  int sourceIndex = GetLine_38(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line38 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer39
[numthreads(64, 4, 1)]
void SetLightResultBuffer39(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line39];
  int sourceIndex = GetLine_39(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line39 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer40
[numthreads(64, 4, 1)]
void SetLightResultBuffer40(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line40];
  int sourceIndex = GetLine_40(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line40 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer41
[numthreads(64, 4, 1)]
void SetLightResultBuffer41(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line41];
  int sourceIndex = GetLine_41(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line41 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer42
[numthreads(64, 4, 1)]
void SetLightResultBuffer42(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line42];
  int sourceIndex = GetLine_42(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line42 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer43
[numthreads(64, 4, 1)]
void SetLightResultBuffer43(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line43];
  int sourceIndex = GetLine_43(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line43 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer44
[numthreads(64, 4, 1)]
void SetLightResultBuffer44(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line44];
  int sourceIndex = GetLine_44(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line44 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer45
[numthreads(64, 4, 1)]
void SetLightResultBuffer45(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line45];
  int sourceIndex = GetLine_45(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line45 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer46
[numthreads(64, 4, 1)]
void SetLightResultBuffer46(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line46];
  int sourceIndex = GetLine_46(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line46 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer47
[numthreads(64, 4, 1)]
void SetLightResultBuffer47(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line47];
  int sourceIndex = GetLine_47(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line47 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer48
[numthreads(64, 4, 1)]
void SetLightResultBuffer48(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line48];
  int sourceIndex = GetLine_48(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line48 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer49
[numthreads(64, 4, 1)]
void SetLightResultBuffer49(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line49];
  int sourceIndex = GetLine_49(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line49 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer50
[numthreads(64, 4, 1)]
void SetLightResultBuffer50(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line50];
  int sourceIndex = GetLine_50(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line50 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer51
[numthreads(64, 4, 1)]
void SetLightResultBuffer51(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line51];
  int sourceIndex = GetLine_51(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line51 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer52
[numthreads(64, 4, 1)]
void SetLightResultBuffer52(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line52];
  int sourceIndex = GetLine_52(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line52 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer53
[numthreads(64, 4, 1)]
void SetLightResultBuffer53(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line53];
  int sourceIndex = GetLine_53(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line53 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer54
[numthreads(64, 4, 1)]
void SetLightResultBuffer54(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line54];
  int sourceIndex = GetLine_54(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line54 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer55
[numthreads(64, 4, 1)]
void SetLightResultBuffer55(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line55];
  int sourceIndex = GetLine_55(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line55 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer56
[numthreads(64, 4, 1)]
void SetLightResultBuffer56(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line56];
  int sourceIndex = GetLine_56(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line56 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer57
[numthreads(64, 4, 1)]
void SetLightResultBuffer57(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line57];
  int sourceIndex = GetLine_57(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line57 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer58
[numthreads(64, 4, 1)]
void SetLightResultBuffer58(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line58];
  int sourceIndex = GetLine_58(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line58 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer59
[numthreads(64, 4, 1)]
void SetLightResultBuffer59(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line59];
  int sourceIndex = GetLine_59(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line59 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer60
[numthreads(64, 4, 1)]
void SetLightResultBuffer60(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line60];
  int sourceIndex = GetLine_60(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line60 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer61
[numthreads(64, 4, 1)]
void SetLightResultBuffer61(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line61];
  int sourceIndex = GetLine_61(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line61 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer62
[numthreads(64, 4, 1)]
void SetLightResultBuffer62(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line62];
  int sourceIndex = GetLine_62(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line62 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer63
[numthreads(64, 4, 1)]
void SetLightResultBuffer63(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line63];
  int sourceIndex = GetLine_63(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line63 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer64
[numthreads(64, 4, 1)]
void SetLightResultBuffer64(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line64];
  int sourceIndex = GetLine_64(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line64 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer65
[numthreads(64, 4, 1)]
void SetLightResultBuffer65(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line65];
  int sourceIndex = GetLine_65(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line65 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer66
[numthreads(64, 4, 1)]
void SetLightResultBuffer66(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line66];
  int sourceIndex = GetLine_66(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line66 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer67
[numthreads(64, 4, 1)]
void SetLightResultBuffer67(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line67];
  int sourceIndex = GetLine_67(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line67 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer68
[numthreads(64, 4, 1)]
void SetLightResultBuffer68(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line68];
  int sourceIndex = GetLine_68(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line68 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer69
[numthreads(64, 4, 1)]
void SetLightResultBuffer69(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line69];
  int sourceIndex = GetLine_69(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line69 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer70
[numthreads(64, 4, 1)]
void SetLightResultBuffer70(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line70];
  int sourceIndex = GetLine_70(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line70 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer71
[numthreads(64, 4, 1)]
void SetLightResultBuffer71(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line71];
  int sourceIndex = GetLine_71(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line71 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer72
[numthreads(64, 4, 1)]
void SetLightResultBuffer72(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line72];
  int sourceIndex = GetLine_72(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line72 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer73
[numthreads(64, 4, 1)]
void SetLightResultBuffer73(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line73];
  int sourceIndex = GetLine_73(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line73 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer74
[numthreads(64, 4, 1)]
void SetLightResultBuffer74(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line74];
  int sourceIndex = GetLine_74(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line74 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer75
[numthreads(64, 4, 1)]
void SetLightResultBuffer75(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line75];
  int sourceIndex = GetLine_75(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line75 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer76
[numthreads(64, 4, 1)]
void SetLightResultBuffer76(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line76];
  int sourceIndex = GetLine_76(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line76 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer77
[numthreads(64, 4, 1)]
void SetLightResultBuffer77(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line77];
  int sourceIndex = GetLine_77(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line77 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer78
[numthreads(64, 4, 1)]
void SetLightResultBuffer78(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line78];
  int sourceIndex = GetLine_78(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line78 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer79
[numthreads(64, 4, 1)]
void SetLightResultBuffer79(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line79];
  int sourceIndex = GetLine_79(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line79 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer80
[numthreads(64, 4, 1)]
void SetLightResultBuffer80(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line80];
  int sourceIndex = GetLine_80(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line80 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer81
[numthreads(64, 4, 1)]
void SetLightResultBuffer81(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line81];
  int sourceIndex = GetLine_81(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line81 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer82
[numthreads(64, 4, 1)]
void SetLightResultBuffer82(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line82];
  int sourceIndex = GetLine_82(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line82 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer83
[numthreads(64, 4, 1)]
void SetLightResultBuffer83(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line83];
  int sourceIndex = GetLine_83(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line83 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer84
[numthreads(64, 4, 1)]
void SetLightResultBuffer84(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line84];
  int sourceIndex = GetLine_84(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line84 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer85
[numthreads(64, 4, 1)]
void SetLightResultBuffer85(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line85];
  int sourceIndex = GetLine_85(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line85 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer86
[numthreads(64, 4, 1)]
void SetLightResultBuffer86(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line86];
  int sourceIndex = GetLine_86(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line86 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer87
[numthreads(64, 4, 1)]
void SetLightResultBuffer87(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line87];
  int sourceIndex = GetLine_87(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line87 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer88
[numthreads(64, 4, 1)]
void SetLightResultBuffer88(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line88];
  int sourceIndex = GetLine_88(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line88 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer89
[numthreads(64, 4, 1)]
void SetLightResultBuffer89(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line89];
  int sourceIndex = GetLine_89(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line89 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer90
[numthreads(64, 4, 1)]
void SetLightResultBuffer90(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line90];
  int sourceIndex = GetLine_90(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line90 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer91
[numthreads(64, 4, 1)]
void SetLightResultBuffer91(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line91];
  int sourceIndex = GetLine_91(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line91 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer92
[numthreads(64, 4, 1)]
void SetLightResultBuffer92(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line92];
  int sourceIndex = GetLine_92(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line92 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer93
[numthreads(64, 4, 1)]
void SetLightResultBuffer93(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line93];
  int sourceIndex = GetLine_93(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line93 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer94
[numthreads(64, 4, 1)]
void SetLightResultBuffer94(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line94];
  int sourceIndex = GetLine_94(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line94 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer95
[numthreads(64, 4, 1)]
void SetLightResultBuffer95(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line95];
  int sourceIndex = GetLine_95(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line95 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer96
[numthreads(64, 4, 1)]
void SetLightResultBuffer96(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line96];
  int sourceIndex = GetLine_96(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line96 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer97
[numthreads(64, 4, 1)]
void SetLightResultBuffer97(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line97];
  int sourceIndex = GetLine_97(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line97 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer98
[numthreads(64, 4, 1)]
void SetLightResultBuffer98(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line98];
  int sourceIndex = GetLine_98(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line98 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer99
[numthreads(64, 4, 1)]
void SetLightResultBuffer99(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line99];
  int sourceIndex = GetLine_99(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line99 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer100
[numthreads(64, 4, 1)]
void SetLightResultBuffer100(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line100];
  int sourceIndex = GetLine_100(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line100 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer101
[numthreads(64, 4, 1)]
void SetLightResultBuffer101(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line101];
  int sourceIndex = GetLine_101(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line101 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer102
[numthreads(64, 4, 1)]
void SetLightResultBuffer102(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line102];
  int sourceIndex = GetLine_102(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line102 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer103
[numthreads(64, 4, 1)]
void SetLightResultBuffer103(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line103];
  int sourceIndex = GetLine_103(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line103 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer104
[numthreads(64, 4, 1)]
void SetLightResultBuffer104(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line104];
  int sourceIndex = GetLine_104(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line104 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer105
[numthreads(64, 4, 1)]
void SetLightResultBuffer105(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line105];
  int sourceIndex = GetLine_105(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line105 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer106
[numthreads(64, 4, 1)]
void SetLightResultBuffer106(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line106];
  int sourceIndex = GetLine_106(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line106 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer107
[numthreads(64, 4, 1)]
void SetLightResultBuffer107(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line107];
  int sourceIndex = GetLine_107(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line107 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer108
[numthreads(64, 4, 1)]
void SetLightResultBuffer108(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line108];
  int sourceIndex = GetLine_108(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line108 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer109
[numthreads(64, 4, 1)]
void SetLightResultBuffer109(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line109];
  int sourceIndex = GetLine_109(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line109 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer110
[numthreads(64, 4, 1)]
void SetLightResultBuffer110(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line110];
  int sourceIndex = GetLine_110(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line110 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer111
[numthreads(64, 4, 1)]
void SetLightResultBuffer111(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line111];
  int sourceIndex = GetLine_111(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line111 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer112
[numthreads(64, 4, 1)]
void SetLightResultBuffer112(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line112];
  int sourceIndex = GetLine_112(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line112 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer113
[numthreads(64, 4, 1)]
void SetLightResultBuffer113(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line113];
  int sourceIndex = GetLine_113(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line113 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer114
[numthreads(64, 4, 1)]
void SetLightResultBuffer114(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line114];
  int sourceIndex = GetLine_114(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line114 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer115
[numthreads(64, 4, 1)]
void SetLightResultBuffer115(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line115];
  int sourceIndex = GetLine_115(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line115 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer116
[numthreads(64, 4, 1)]
void SetLightResultBuffer116(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line116];
  int sourceIndex = GetLine_116(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line116 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer117
[numthreads(64, 4, 1)]
void SetLightResultBuffer117(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line117];
  int sourceIndex = GetLine_117(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line117 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer118
[numthreads(64, 4, 1)]
void SetLightResultBuffer118(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line118];
  int sourceIndex = GetLine_118(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line118 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer119
[numthreads(64, 4, 1)]
void SetLightResultBuffer119(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line119];
  int sourceIndex = GetLine_119(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line119 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer120
[numthreads(64, 4, 1)]
void SetLightResultBuffer120(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line120];
  int sourceIndex = GetLine_120(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line120 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer121
[numthreads(64, 4, 1)]
void SetLightResultBuffer121(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line121];
  int sourceIndex = GetLine_121(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line121 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer122
[numthreads(64, 4, 1)]
void SetLightResultBuffer122(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line122];
  int sourceIndex = GetLine_122(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line122 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer123
[numthreads(64, 4, 1)]
void SetLightResultBuffer123(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line123];
  int sourceIndex = GetLine_123(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line123 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer124
[numthreads(64, 4, 1)]
void SetLightResultBuffer124(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line124];
  int sourceIndex = GetLine_124(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line124 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer125
[numthreads(64, 4, 1)]
void SetLightResultBuffer125(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line125];
  int sourceIndex = GetLine_125(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line125 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer126
[numthreads(64, 4, 1)]
void SetLightResultBuffer126(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line126];
  int sourceIndex = GetLine_126(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line126 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer127
[numthreads(64, 4, 1)]
void SetLightResultBuffer127(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line127];
  int sourceIndex = GetLine_127(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line127 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

#pragma kernel SetLightResultBuffer128
[numthreads(64, 4, 1)]
void SetLightResultBuffer128(int3 id : SV_DispatchThreadID)
{
    LightSource source = LightSourceBuffer[0];

    int2 gloabPos = IDToGloabPos(id.xy);
    int2 lineArray[Line128];
  int sourceIndex = GetLine_128(gloabPos, source.gloabPos, lineArray);
  float3 sourceColor = float3(source.color.xyz / 255.0);  
    float3 filterColor = sourceColor;
    float shadow = 1;
    float lastAffects = shadow;
    for (int i = sourceIndex; i >= 0; i--)
    {
        if (Equalsi2(GlockToBlock(lineArray[i]), BlockPos))
        {
        int Index = PixelToIndex(GlobalToPixel(lineArray[i]));
      float weak = pow(clamp(1 - distance(lineArray[i], lineArray[sourceIndex]) / (Line128 + 1), 0, 1), 2);
      int3 color = filterColor * 255 * weak * shadow;
        InterlockedAdd(LightResultBufferTemp[Index].x, color.x);
        InterlockedAdd(LightResultBufferTemp[Index].y, color.y);
        InterlockedAdd(LightResultBufferTemp[Index].z, color.z);
        InterlockedAdd(LightResultBufferTemp[Index].w, 1);
        }
        PixelColorInfo typeInfo = GetPixel(lineArray[i]);
        if(typeInfo.affectsLightIntensity != -1)
        {
            float4 infoColor = typeInfo.color / 255.0;
            filterColor.xyz = min(filterColor.xyz * (1 - infoColor.w) + infoColor.xyz * infoColor.w , filterColor.xyz);
            if(typeInfo.affectsLightIntensity != lastAffects)
            {
                shadow *=(1- typeInfo.affectsLightIntensity);
                lastAffects = typeInfo.affectsLightIntensity;
            }
        }
    }
}

